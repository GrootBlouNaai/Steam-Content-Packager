<?xml version="1.0" encoding="utf-8"?>
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="clr-namespace:SteamContentPackager" xmlns:converters="clr-namespace:SteamContentPackager.Utils.Converters" xmlns:themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero" xmlns:system="clr-namespace:System;assembly=mscorlib">
  <converters:MathAddConverter x:Key="MathAddConverter" />
  <system:Double x:Key="progressTextOffset">5</system:Double>
  <Color x:Key="WindowBackground">#222222</Color>
  <Color x:Key="ButtonBackground">#222222</Color>
  <Color x:Key="ButtonMouseOverBackground">#444444</Color>
  <Color x:Key="ControlBorder">Silver</Color>
  <Color x:Key="ControlBackground">#161616</Color>
  <Color x:Key="ControlForeground">Silver</Color>
  <Color x:Key="ControlDisabledForeground">#888888</Color>
  <Style x:Key="FocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type ResizeGrip}" TargetType="{x:Type ResizeGrip}">
    <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
    <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ResizeGrip}">
          <Grid SnapsToDevicePixels="True" Background="{TemplateBinding Control.Background}">
            <Path Data="M8,0 L10,0 L10,2 L8,2 M4,4 L6,4 L6,6 L4,6 M8,4 L10,4 L10,6 L8,6 M0,8 L2,8 L2,10 L0,10 M4,8 L6,8 L6,10 L4,10 M8,8 L10,8 L10,10 L8,10" Fill="#FFC0C0C0" HorizontalAlignment="Right" Margin="0,0,3,3" VerticalAlignment="Bottom" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Margin" Value="0,0,8,8" />
  </Style>
  <SolidColorBrush x:Key="Window.Background" Color="{DynamicResource WindowBackground}" />
  <SolidColorBrush x:Key="Button.Static.Background" Color="{DynamicResource ButtonBackground}" />
  <SolidColorBrush x:Key="Button.Static.Border" Color="{DynamicResource ControlBorder}" />
  <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#444444" />
  <SolidColorBrush x:Key="Button.MouseOver.Border" Color="{DynamicResource ControlBorder}" />
  <SolidColorBrush x:Key="Button.Pressed.Background" Color="#444444" />
  <SolidColorBrush x:Key="Button.Pressed.Border" Color="{DynamicResource ControlBorder}" />
  <SolidColorBrush x:Key="Button.Disabled.Background" Color="{DynamicResource ButtonBackground}" />
  <SolidColorBrush x:Key="Button.Disabled.Border" Color="{DynamicResource ControlDisabledForeground}" />
  <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="{DynamicResource ControlDisabledForeground}" />
  <SolidColorBrush x:Key="Button.Static.Foreground" Color="{DynamicResource ControlForeground}" />
  <SolidColorBrush x:Key="Item.MouseOver.Background" Color="Transparent" />
  <SolidColorBrush x:Key="Item.MouseOver.Border" Color="Transparent" />
  <SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="Transparent" />
  <SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="#00000000" />
  <SolidColorBrush x:Key="Item.SelectedActive.Background" Color="#00000000" />
  <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="#00000000" />
  <Style x:Key="ListBoxItemStyle1" TargetType="{x:Type ListBoxItem}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="Padding" Value="4,0" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="BorderBrush" Value="#00FFFFFF" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisual}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Border Name="Bd" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}" SnapsToDevicePixels="True">
            <ContentPresenter HorizontalAlignment="{TemplateBinding FrameworkElement.HorizontalAlignment}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
          </Border>
          <ControlTemplate.Triggers>
            <EventTrigger RoutedEvent="MouseLeave" />
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Border.Background" Value="{StaticResource Item.MouseOver.Background}" />
              <Setter TargetName="Bd" Property="Border.BorderBrush" Value="{StaticResource Item.MouseOver.Border}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Selector.IsSelectionActive" Value="False" />
                <Condition Property="ListBoxItem.IsSelected" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Border.Background" Value="{StaticResource Item.SelectedInactive.Background}" />
              <Setter TargetName="Bd" Property="Border.BorderBrush" Value="{StaticResource Item.SelectedInactive.Border}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Selector.IsSelectionActive" Value="True" />
                <Condition Property="ListBoxItem.IsSelected" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Border.Background" Value="{StaticResource Item.SelectedActive.Background}" />
              <Setter TargetName="Bd" Property="Border.BorderBrush" Value="{StaticResource Item.SelectedActive.Border}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="TextElement.Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type Button}" TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisual}" />
    <Setter Property="Background" Value="{StaticResource Button.Static.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource Button.Static.Border}" />
    <Setter Property="Foreground" Value="{DynamicResource Button.Static.Foreground}" />
    <Setter Property="BorderThickness" Value="2" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="5,3,5,3" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Name="border" CornerRadius="4" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True">
            <ContentPresenter Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
          </Border>
          <ControlTemplate.Triggers>
            <EventTrigger RoutedEvent="MouseLeave">
              <BeginStoryboard>
                <Storyboard>
                  <ColorAnimation Duration="00:00:0.2" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color" From="{StaticResource ButtonMouseOverBackground}" To="{StaticResource ButtonBackground}" />
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
            <Trigger Property="Button.IsDefaulted" Value="True">
              <Setter TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="border" Property="Border.Background" Value="{StaticResource Button.MouseOver.Background}" />
              <Setter TargetName="border" Property="Border.BorderBrush" Value="{StaticResource Button.MouseOver.Border}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="border" Property="Border.Background" Value="{StaticResource Button.Pressed.Background}" />
              <Setter TargetName="border" Property="Border.BorderBrush" Value="{StaticResource Button.Pressed.Border}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="border" Property="Border.Background" Value="{StaticResource Button.Disabled.Background}" />
              <Setter TargetName="border" Property="Border.BorderBrush" Value="{StaticResource Button.Disabled.Border}" />
              <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{StaticResource Button.Disabled.Foreground}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="WindowButton.Static.Foregound" Color="#ACACAC" />
  <SolidColorBrush x:Key="WindowButton.MouseOver.Foregound" Color="Silver" />
  <Style x:Key="WindowButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisual}" />
    <Setter Property="Background" Value="{StaticResource Button.Static.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource Button.Static.Border}" />
    <Setter Property="Foreground" Value="{DynamicResource WindowButton.Static.Foregound}" />
    <Setter Property="BorderThickness" Value="2" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="5,3,5,3" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Name="border" CornerRadius="4" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True">
            <ContentPresenter Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
          </Border>
          <ControlTemplate.Triggers>
            <EventTrigger RoutedEvent="UIElement.MouseLeave">
              <BeginStoryboard>
                <Storyboard>
                  <ColorAnimation Duration="00:00:0.2" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color" From="{StaticResource ButtonMouseOverBackground}" To="{StaticResource ButtonBackground}" />
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
            <Trigger Property="Button.IsDefaulted" Value="True">
              <Setter TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="border" Property="Border.Background" Value="{StaticResource Button.MouseOver.Background}" />
              <Setter TargetName="border" Property="Border.BorderBrush" Value="{StaticResource Button.MouseOver.Border}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="border" Property="Border.Background" Value="{StaticResource Button.Pressed.Background}" />
              <Setter TargetName="border" Property="Border.BorderBrush" Value="{StaticResource Button.Pressed.Border}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="border" Property="Border.Background" Value="{StaticResource Button.Disabled.Background}" />
              <Setter TargetName="border" Property="Border.BorderBrush" Value="{StaticResource Button.Disabled.Border}" />
              <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{StaticResource Button.Disabled.Foreground}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="TextBox.Static.Border" Color="#FFABAdB3" />
  <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA" />
  <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5" />
  <SolidColorBrush x:Key="TextBox.Static.Background" Color="{DynamicResource ControlBackground}" />
  <SolidColorBrush x:Key="TextBox.Static.Foreground" Color="{DynamicResource ControlForeground}" />
  <Style x:Key="{x:Type TextBox}" TargetType="{x:Type TextBox}">
    <Setter Property="Background" Value="{DynamicResource TextBox.Static.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource TextBox.Static.Border}" />
    <Setter Property="Foreground" Value="{DynamicResource TextBox.Static.Foreground}" />
    <Setter Property="BorderThickness" Value="2" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="UIElement.AllowDrop" Value="True" />
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Grid>
            <Border Name="Border" Background="{DynamicResource TextBox.Static.Background}" BorderBrush="{DynamicResource TextBox.Static.Border}" CornerRadius="4" BorderThickness="2" />
            <ScrollViewer Name="PART_ContentHost" Margin="5,0,0,0" VerticalAlignment="Center" />
            <Label Name="WaterMarkLabel" Margin="5,0,0,0" Content="{TemplateBinding FrameworkElement.Tag}" VerticalAlignment="Center" Visibility="Collapsed" Foreground="#FF808080" FontFamily="Arial" />
          </Grid>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Text" Value="" />
                <Condition Property="IsEnabled" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="WaterMarkLabel" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsEnabled" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Value="{DynamicResource Button.Disabled.Border}" Property="Border.BorderBrush" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="TextBoxBase.IsInactiveSelectionHighlightEnabled" Value="True" />
          <Condition Property="TextBoxBase.IsSelectionActive" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="TextBoxBase.SelectionBrush" Value="{DynamicResource Button.MouseOver.Background}" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <BorderGapMaskConverter x:Key="BorderGapMaskConverter" />
  <Style x:Key="{x:Type GroupBox}" TargetType="{x:Type GroupBox}">
    <Setter Property="BorderBrush" Value="{DynamicResource Button.Static.Border}" />
    <Setter Property="BorderThickness" Value="2" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type GroupBox}">
          <Grid SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="6" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="6" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
              <RowDefinition Height="6" />
            </Grid.RowDefinitions>
            <Border Name="Border" BorderBrush="#00FFFFFF" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" Grid.ColumnSpan="4" Grid.Column="0" Grid.Row="1" Grid.RowSpan="3" />
            <Border SnapsToDevicePixels="False" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Grid.ColumnSpan="4" CornerRadius="4" Grid.Row="1" Grid.RowSpan="3">
              <UIElement.OpacityMask>
                <MultiBinding ConverterParameter="7" Converter="{StaticResource BorderGapMaskConverter}">
                  <Binding ElementName="Header" Path="ActualWidth" />
                  <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
                  <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
                </MultiBinding>
              </UIElement.OpacityMask>
            </Border>
            <Border Name="Header" Grid.Column="1" Padding="3,0,3,0" Grid.Row="0" Grid.RowSpan="2">
              <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
            </Border>
            <ContentPresenter Grid.ColumnSpan="2" Grid.Column="1" Margin="{TemplateBinding Control.Padding}" Grid.Row="2" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsEnabled" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="{DynamicResource Button.Disabled.Border}" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <SolidColorBrush x:Key="ListBox.Static.Foreground" Color="{DynamicResource ControlForeground}" />
  <SolidColorBrush x:Key="ListBox.Static.Background" Color="{DynamicResource ControlBackground}" />
  <SolidColorBrush x:Key="ListBox.Static.Border" Color="{DynamicResource ControlBorder}" />
  <SolidColorBrush x:Key="ListBox.Disabled.Background" Color="{DynamicResource ControlBackground}" />
  <SolidColorBrush x:Key="ListBox.Disabled.Border" Color="{DynamicResource ControlDisabledForeground}" />
  <Style x:Key="{x:Type ListBox}" TargetType="{x:Type ListBox}">
    <Setter Property="Background" Value="{StaticResource ListBox.Static.Background}" />
    <Setter Property="BorderBrush" Value="{StaticResource ListBox.Static.Border}" />
    <Setter Property="BorderThickness" Value="2" />
    <Setter Property="Foreground" Value="{DynamicResource ListBox.Static.Foreground}" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
    <Setter Property="ScrollViewer.PanningMode" Value="Both" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBox}">
          <Border Name="Bd" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="4" Background="{TemplateBinding Control.Background}" Padding="1" SnapsToDevicePixels="True">
            <ScrollViewer Focusable="False" Padding="{TemplateBinding Control.Padding}">
              <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
            </ScrollViewer>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Bd" Property="Border.Background" Value="{StaticResource ListBox.Disabled.Background}" />
              <Setter TargetName="Bd" Property="Border.BorderBrush" Value="{StaticResource ListBox.Disabled.Border}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ItemsControl.IsGrouping" Value="True" />
                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
              </MultiTrigger.Conditions>
              <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="OptionMark.Static.Background" Color="{DynamicResource ControlBackground}" />
  <SolidColorBrush x:Key="OptionMark.Static.Border" Color="#AAAAAA" />
  <Style x:Key="OptionMarkFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="{DynamicResource ControlBackground}" />
  <SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="{DynamicResource ControlForeground}" />
  <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="{DynamicResource ControlForeground}" />
  <SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="{DynamicResource WindowBackground}" />
  <SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="{DynamicResource ControlDisabledForeground}" />
  <SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="{DynamicResource ControlDisabledForeground}" />
  <SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="{DynamicResource ControlBackground}" />
  <SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="{DynamicResource ControlForeground}" />
  <SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="{DynamicResource ControlForeground}" />
  <SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="#AAAAAA" />
  <Style x:Key="{x:Type CheckBox}" TargetType="{x:Type CheckBox}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisual}" />
    <Setter Property="Background" Value="{StaticResource OptionMark.Static.Background}" />
    <Setter Property="BorderBrush" Value="{StaticResource OptionMark.Static.Border}" />
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
    <Setter Property="BorderThickness" Value="2" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
          <Grid Name="templateRoot" Background="#00FFFFFF" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Border Name="checkBoxBorder" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="4" Background="{TemplateBinding Control.Background}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}">
              <Grid Name="markGrid">
                <Path Name="optionMark" Data="F1 M9.97498,1.22334 L4.6983,9.09834 L4.52164,9.09834 L0,5.19331 L1.27664,3.52165 L4.255,6.08833 L8.33331,1.52588E-05 L9.97498,1.22334" Margin="1" Opacity="0" Stretch="None" Fill="{StaticResource OptionMark.Static.Glyph}" />
                <Rectangle Name="indeterminateMark" Margin="2" Opacity="0" Fill="{StaticResource OptionMark.Static.Glyph}" />
              </Grid>
            </Border>
            <ContentPresenter Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="HasContent" Value="True">
              <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}" />
              <Setter Property="Padding" Value="4,-1,0,0" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="checkBoxBorder" Property="Border.Background" Value="{StaticResource OptionMark.MouseOver.Background}" />
              <Setter TargetName="checkBoxBorder" Property="Border.BorderBrush" Value="{StaticResource OptionMark.MouseOver.Border}" />
              <Setter TargetName="optionMark" Property="Shape.Fill" Value="{StaticResource OptionMark.MouseOver.Glyph}" />
              <Setter TargetName="indeterminateMark" Property="Shape.Fill" Value="{StaticResource OptionMark.MouseOver.Glyph}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="checkBoxBorder" Property="Border.Background" Value="{StaticResource OptionMark.Disabled.Background}" />
              <Setter TargetName="checkBoxBorder" Property="Border.BorderBrush" Value="{StaticResource OptionMark.Disabled.Border}" />
              <Setter TargetName="optionMark" Property="Shape.Fill" Value="{StaticResource OptionMark.Disabled.Glyph}" />
              <Setter TargetName="indeterminateMark" Property="Shape.Fill" Value="{StaticResource OptionMark.Disabled.Glyph}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="checkBoxBorder" Property="Border.Background" Value="{StaticResource OptionMark.Pressed.Background}" />
              <Setter TargetName="checkBoxBorder" Property="Border.BorderBrush" Value="{StaticResource OptionMark.Pressed.Border}" />
              <Setter TargetName="optionMark" Property="Shape.Fill" Value="{StaticResource OptionMark.Pressed.Glyph}" />
              <Setter TargetName="indeterminateMark" Property="Shape.Fill" Value="{StaticResource OptionMark.Pressed.Glyph}" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="optionMark" Property="UIElement.Opacity" Value="1" />
              <Setter TargetName="indeterminateMark" Property="UIElement.Opacity" Value="0" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="{x:Null}">
              <Setter TargetName="optionMark" Property="UIElement.Opacity" Value="0" />
              <Setter TargetName="indeterminateMark" Property="UIElement.Opacity" Value="1" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="ComboBox.Static.Background" Color="{DynamicResource ControlBackground}" />
  <SolidColorBrush x:Key="ComboBox.MouseOver.Background" Color="{DynamicResource ControlBackground}" />
  <SolidColorBrush x:Key="ComboBox.Static.Border" Color="{DynamicResource ControlBorder}" />
  <SolidColorBrush x:Key="ComboBox.Static.Editable.Background" Color="{DynamicResource ControlBorder}" />
  <SolidColorBrush x:Key="ComboBox.Static.Editable.Border" Color="#FFABADB3" />
  <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background" Color="Transparent" />
  <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border" Color="Transparent" />
  <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="Silver" />
  <SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="{DynamicResource ControlBorder}" />
  <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background" Color="{DynamicResource ControlBorder}" />
  <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border" Color="#FF7EB4EA" />
  <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Background" Color="{DynamicResource ControlBackground}" />
  <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border" Color="#FF7EB4EA" />
  <SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="Silver" />
  <SolidColorBrush x:Key="ComboBox.Pressed.Background" Color="{DynamicResource ControlBackground}" />
  <SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="#FF569DE5" />
  <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background" Color="{DynamicResource ControlBorder}" />
  <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border" Color="#FF569DE5" />
  <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Background" Color="{DynamicResource ControlBackground}" />
  <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border" Color="#FF569DE5" />
  <SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="{DynamicResource ControlDisabledForeground}" />
  <SolidColorBrush x:Key="ComboBox.Disabled.Background" Color="{DynamicResource ControlBackground}" />
  <SolidColorBrush x:Key="ComboBox.Disabled.Border" Color="{DynamicResource ControlDisabledForeground}" />
  <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background" Color="{DynamicResource ControlBorder}" />
  <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border" Color="#FFBFBFBF" />
  <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background" Color="Transparent" />
  <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border" Color="Transparent" />
  <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="#FF606060" />
  <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="ButtonBase.ClickMode" Value="Press" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Name="templateRoot" CornerRadius="4" BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="True" BorderBrush="{StaticResource ComboBox.Static.Border}" Background="{StaticResource ComboBox.Static.Background}">
            <Border Name="splitBorder" BorderBrush="#00FFFFFF" BorderThickness="1" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="True" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
              <Path Name="arrow" Data="F1 M0,0 L2.667,2.66665 L5.3334,0 L5.3334,-1.78168 L2.6667,0.88501 L0,-1.78168 L0,0" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center" Fill="{StaticResource ComboBox.Static.Glyph}" />
            </Border>
          </Border>
          <ControlTemplate.Triggers>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="true" Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
                <Condition Value="false" Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" />
                <Condition Value="false" Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" />
                <Condition Value="true" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="templateRoot" Property="Border.Background" Value="{StaticResource ComboBox.Static.Editable.Background}" />
              <Setter TargetName="templateRoot" Property="Border.BorderBrush" Value="{StaticResource ComboBox.Static.Editable.Border}" />
              <Setter TargetName="splitBorder" Property="Border.Background" Value="{StaticResource ComboBox.Static.Editable.Button.Background}" />
              <Setter TargetName="splitBorder" Property="Border.BorderBrush" Value="{StaticResource ComboBox.Static.Editable.Button.Border}" />
            </MultiDataTrigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="arrow" Property="Shape.Fill" Value="{StaticResource ComboBox.MouseOver.Glyph}" />
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="true" Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" />
                <Condition Value="false" Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="templateRoot" Property="Border.Background" Value="{StaticResource ComboBox.MouseOver.Background}" />
              <Setter TargetName="templateRoot" Property="Border.BorderBrush" Value="{StaticResource ComboBox.MouseOver.Border}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="true" Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" />
                <Condition Value="true" Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="templateRoot" Property="Border.Background" Value="{StaticResource ComboBox.MouseOver.Editable.Background}" />
              <Setter TargetName="templateRoot" Property="Border.BorderBrush" Value="{StaticResource ComboBox.MouseOver.Editable.Border}" />
              <Setter TargetName="splitBorder" Property="Border.Background" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}" />
              <Setter TargetName="splitBorder" Property="Border.BorderBrush" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}" />
            </MultiDataTrigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="arrow" Property="Shape.Fill" Value="{StaticResource ComboBox.Pressed.Glyph}" />
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="true" Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" />
                <Condition Value="false" Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="templateRoot" Property="Border.Background" Value="{StaticResource ComboBox.Pressed.Background}" />
              <Setter TargetName="templateRoot" Property="Border.BorderBrush" Value="{StaticResource ComboBox.Pressed.Border}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="true" Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" />
                <Condition Value="true" Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="templateRoot" Property="Border.Background" Value="{StaticResource ComboBox.Pressed.Editable.Background}" />
              <Setter TargetName="templateRoot" Property="Border.BorderBrush" Value="{StaticResource ComboBox.Pressed.Editable.Border}" />
              <Setter TargetName="splitBorder" Property="Border.Background" Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}" />
              <Setter TargetName="splitBorder" Property="Border.BorderBrush" Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}" />
            </MultiDataTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="arrow" Property="Shape.Fill" Value="{StaticResource ComboBox.Disabled.Glyph}" />
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="false" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" />
                <Condition Value="false" Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="templateRoot" Property="Border.Background" Value="{StaticResource ComboBox.Disabled.Background}" />
              <Setter TargetName="templateRoot" Property="Border.BorderBrush" Value="{StaticResource ComboBox.Disabled.Border}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="false" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" />
                <Condition Value="true" Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="templateRoot" Property="Border.Background" Value="{StaticResource ComboBox.Disabled.Editable.Background}" />
              <Setter TargetName="templateRoot" Property="Border.BorderBrush" Value="{StaticResource ComboBox.Disabled.Editable.Border}" />
              <Setter TargetName="splitBorder" Property="Border.Background" Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}" />
              <Setter TargetName="splitBorder" Property="Border.BorderBrush" Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}" />
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
    <Grid Name="templateRoot" SnapsToDevicePixels="True">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*" />
        <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0" />
      </Grid.ColumnDefinitions>
      <Popup Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
        <themes:SystemDropShadowChrome themes:SystemDropShadowChrome.Name="shadow" themes:SystemDropShadowChrome.Color="Transparent" FrameworkElement.MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}" FrameworkElement.MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
          <Border Name="dropDownBorder" BorderBrush="{DynamicResource ComboBox.Static.Border}" BorderThickness="2" CornerRadius="4" Background="{DynamicResource ComboBox.Static.Background}">
            <ScrollViewer Name="DropDownScrollViewer">
              <Grid Name="grid" RenderOptions.ClearTypeHint="Enabled">
                <Canvas Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                  <Rectangle Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}" />
                </Canvas>
                <ItemsPresenter Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
              </Grid>
            </ScrollViewer>
          </Border>
        </themes:SystemDropShadowChrome>
      </Popup>
      <ToggleButton Name="toggleButton" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" Grid.ColumnSpan="2" Style="{StaticResource ComboBoxToggleButton}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
      <ContentPresenter Name="contentPresenter" ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}" Content="{TemplateBinding ComboBox.SelectionBoxItem}" ContentStringFormat="{TemplateBinding ComboBox.SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" IsHitTestVisible="False" Margin="{TemplateBinding Control.Padding}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
        <Setter TargetName="shadow" Property="FrameworkElement.Margin" Value="0,0,5,5" />
        <Setter TargetName="shadow" Property="themes:SystemDropShadowChrome.Color" Value="#71000000" />
      </Trigger>
      <Trigger Property="ItemsControl.HasItems" Value="False">
        <Setter TargetName="dropDownBorder" Property="FrameworkElement.Height" Value="95" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ItemsControl.IsGrouping" Value="True" />
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
      </MultiTrigger>
      <Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="False">
        <Setter TargetName="opaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
        <Setter TargetName="opaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
    <Setter Property="UIElement.AllowDrop" Value="True" />
    <Setter Property="MinWidth" Value="0" />
    <Setter Property="MinHeight" Value="0" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <ScrollViewer Name="PART_ContentHost" Background="#00FFFFFF" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
    <Grid Name="templateRoot" SnapsToDevicePixels="True">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*" />
        <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0" />
      </Grid.ColumnDefinitions>
      <Popup Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
        <themes:SystemDropShadowChrome themes:SystemDropShadowChrome.Name="shadow" themes:SystemDropShadowChrome.Color="Transparent" FrameworkElement.MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}" FrameworkElement.MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
          <Border Name="dropDownBorder" CornerRadius="4" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="2" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
            <ScrollViewer Name="DropDownScrollViewer">
              <Grid Name="grid" RenderOptions.ClearTypeHint="Enabled">
                <Canvas Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                  <Rectangle Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}" />
                </Canvas>
                <ItemsPresenter Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
              </Grid>
            </ScrollViewer>
          </Border>
        </themes:SystemDropShadowChrome>
      </Popup>
      <ToggleButton Name="toggleButton" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" Grid.ColumnSpan="2" Style="{StaticResource ComboBoxToggleButton}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
      <Border Name="border" Margin="{TemplateBinding Control.BorderThickness}" CornerRadius="4" Background="{StaticResource TextBox.Static.Background}">
        <TextBox Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" Style="{StaticResource ComboBoxEditableTextBox}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" />
      </Border>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter TargetName="border" Property="UIElement.Opacity" Value="0.56" />
      </Trigger>
      <Trigger Property="UIElement.IsKeyboardFocusWithin" Value="True">
        <Setter Property="Control.Foreground" Value="#FF000000" />
      </Trigger>
      <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
        <Setter TargetName="shadow" Property="FrameworkElement.Margin" Value="0,0,5,5" />
        <Setter TargetName="shadow" Property="themes:SystemDropShadowChrome.Color" Value="#71000000" />
      </Trigger>
      <Trigger Property="ItemsControl.HasItems" Value="False">
        <Setter TargetName="dropDownBorder" Property="FrameworkElement.Height" Value="95" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ItemsControl.IsGrouping" Value="True" />
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
      </MultiTrigger>
      <Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="False">
        <Setter TargetName="opaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
        <Setter TargetName="opaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisual}" />
    <Setter Property="Background" Value="{StaticResource ComboBox.Static.Background}" />
    <Setter Property="BorderBrush" Value="{StaticResource ComboBox.Static.Border}" />
    <Setter Property="Foreground" Value="{DynamicResource ComboBox.Static.Border}" />
    <Setter Property="BorderThickness" Value="2" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="Padding" Value="6,3,5,3" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
    <Setter Property="ScrollViewer.PanningMode" Value="Both" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}" />
    <Style.Triggers>
      <Trigger Property="ComboBox.IsEditable" Value="True">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHover.Background" Color="#666666" />
  <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHover.Border" Color="#666666" />
  <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelected.Background" Color="#777777" />
  <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelected.Border" Color="#777777" />
  <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedHover.Background" Color="#777777" />
  <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedHover.Border" Color="#777777" />
  <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedNoFocus.Background" Color="#777777" />
  <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedNoFocus.Border" Color="#777777" />
  <SolidColorBrush x:Key="ComboBoxItem.ItemsviewFocus.Border" Color="#666666" />
  <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHoverFocus.Background" Color="#666666" />
  <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHoverFocus.Border" Color="#666666" />
  <Style x:Key="ComboBoxItemStyle1" TargetType="{x:Type ComboBoxItem}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="Padding" Value="4,1" />
    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="BorderBrush" Value="#00FFFFFF" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisual}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
          <Border Name="Bd" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}" SnapsToDevicePixels="True">
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="TextElement.Foreground" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="False" />
                <Condition Property="UIElement.IsMouseOver" Value="True" />
                <Condition Property="UIElement.IsKeyboardFocused" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Border.Background" Value="{StaticResource ComboBoxItem.ItemsviewHover.Background}" />
              <Setter TargetName="Bd" Property="Border.BorderBrush" Value="{StaticResource ComboBoxItem.ItemsviewHover.Border}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="True" />
                <Condition Property="UIElement.IsMouseOver" Value="False" />
                <Condition Property="UIElement.IsKeyboardFocused" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Border.Background" Value="{StaticResource ComboBoxItem.ItemsviewSelected.Background}" />
              <Setter TargetName="Bd" Property="Border.BorderBrush" Value="{StaticResource ComboBoxItem.ItemsviewSelected.Border}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="True" />
                <Condition Property="UIElement.IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Border.Background" Value="{StaticResource ComboBoxItem.ItemsviewSelectedHover.Background}" />
              <Setter TargetName="Bd" Property="Border.BorderBrush" Value="{StaticResource ComboBoxItem.ItemsviewSelectedHover.Border}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="True" />
                <Condition Property="UIElement.IsMouseOver" Value="False" />
                <Condition Property="UIElement.IsKeyboardFocused" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Border.Background" Value="{StaticResource ComboBoxItem.ItemsviewSelectedNoFocus.Background}" />
              <Setter TargetName="Bd" Property="Border.BorderBrush" Value="{StaticResource ComboBoxItem.ItemsviewSelectedNoFocus.Border}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="False" />
                <Condition Property="UIElement.IsMouseOver" Value="False" />
                <Condition Property="UIElement.IsKeyboardFocused" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Border.BorderBrush" Value="{StaticResource ComboBoxItem.ItemsviewFocus.Border}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="False" />
                <Condition Property="UIElement.IsMouseOver" Value="True" />
                <Condition Property="UIElement.IsKeyboardFocused" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Border.Background" Value="{StaticResource ComboBoxItem.ItemsviewHoverFocus.Background}" />
              <Setter TargetName="Bd" Property="Border.BorderBrush" Value="{StaticResource ComboBoxItem.ItemsviewHoverFocus.Border}" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="ProgressBar.Progress" Color="{DynamicResource ControlForeground}" />
  <SolidColorBrush x:Key="ProgressBar.Background" Color="{DynamicResource ControlBackground}" />
  <SolidColorBrush x:Key="ProgressBar.Border" Color="{DynamicResource ControlForeground}" />
  <Style x:Key="{x:Type ProgressBar}" TargetType="{x:Type ProgressBar}">
    <Setter Property="Foreground" Value="{StaticResource ProgressBar.Progress}" />
    <Setter Property="Background" Value="{StaticResource ProgressBar.Background}" />
    <Setter Property="BorderBrush" Value="{StaticResource ProgressBar.Border}" />
    <Setter Property="BorderThickness" Value="3" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ProgressBar}">
          <Grid Name="TemplateRoot">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Determinate" />
                <VisualState x:Name="Indeterminate" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" />
            <Rectangle Name="PART_Track" Margin="1" Fill="#FF000000" />
            <Grid Name="PART_Indicator" Margin="3" ClipToBounds="True" HorizontalAlignment="Left">
              <Rectangle Name="Indicator" Fill="{TemplateBinding Control.Foreground}" />
              <Rectangle Name="Animation" Fill="{TemplateBinding Control.Foreground}" RenderTransformOrigin="0.5,0.5" />
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ProgressBar.Orientation" Value="Vertical">
              <Setter TargetName="TemplateRoot" Property="FrameworkElement.LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="-90" />
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ProgressBar.IsIndeterminate" Value="True">
              <Setter TargetName="Indicator" Property="Visibility" Value="Collapsed" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="ProgressBarBackground" Color="{DynamicResource ControlBackground}" />
  <LinearGradientBrush x:Key="ProgressBarBorderBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#B2B2B2" Offset="0" />
    <GradientStop Color="#8C8C8C" Offset="1" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="ProgressBarGlassyHighlight" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#50FFFFFF" Offset="0.5385" />
    <GradientStop Color="#00FFFFFF" Offset="0.5385" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="ProgressBarTopHighlight" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#80FFFFFF" Offset="0.05" />
    <GradientStop Color="#00FFFFFF" Offset="0.25" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill" EndPoint="1,0" StartPoint="0,0">
    <GradientStop Color="#00FFFFFF" Offset="0" />
    <GradientStop Color="#60FFFFFF" Offset="0.4" />
    <GradientStop Color="#60FFFFFF" Offset="0.6" />
    <GradientStop Color="#00FFFFFF" Offset="1" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="ProgressBarIndicatorDarkEdgeLeft" EndPoint="1,0" StartPoint="0,0">
    <GradientStop Color="#0C000000" Offset="0" />
    <GradientStop Color="#20000000" Offset="0.3" />
    <GradientStop Color="#00000000" Offset="1" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="ProgressBarIndicatorDarkEdgeRight" EndPoint="1,0" StartPoint="0,0">
    <GradientStop Color="#00000000" Offset="0" />
    <GradientStop Color="#20000000" Offset="0.7" />
    <GradientStop Color="#0C000000" Offset="1" />
  </LinearGradientBrush>
  <RadialGradientBrush x:Key="ProgressBarIndicatorLightingEffectLeft" RadiusY="1" RadiusX="1" RelativeTransform="1,0,0,1,0.5,0.5">
    <GradientStop Color="#60FFFFC4" Offset="0" />
    <GradientStop Color="#00FFFFC4" Offset="1" />
  </RadialGradientBrush>
  <LinearGradientBrush x:Key="ProgressBarIndicatorLightingEffect" EndPoint="0,0" StartPoint="0,1">
    <GradientStop Color="#60FFFFC4" Offset="0" />
    <GradientStop Color="#00FFFFC4" Offset="1" />
  </LinearGradientBrush>
  <RadialGradientBrush x:Key="ProgressBarIndicatorLightingEffectRight" RadiusY="1" RadiusX="1" RelativeTransform="1,0,0,1,-0.5,0.5">
    <GradientStop Color="#60FFFFC4" Offset="0" />
    <GradientStop Color="#00FFFFC4" Offset="1" />
  </RadialGradientBrush>
  <LinearGradientBrush x:Key="ProgressBarIndicatorGlassyHighlight" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#90FFFFFF" Offset="0.5385" />
    <GradientStop Color="#00FFFFFF" Offset="0.5385" />
  </LinearGradientBrush>
  <Style x:Key="MyProgressBarStyle" TargetType="{x:Type ProgressBar}">
    <Setter Property="Foreground" Value="#FFC0C0C0" />
    <Setter Property="Background" Value="{StaticResource ProgressBarBackground}" />
    <Setter Property="BorderBrush" Value="{StaticResource ProgressBarBorderBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ProgressBar}">
          <FrameworkTemplate.Resources>
            <ResourceDictionary>
              <converters:RectConverter x:Key="RectConverter" />
            </ResourceDictionary>
          </FrameworkTemplate.Resources>
          <Grid Name="TemplateRoot" SnapsToDevicePixels="True">
            <TextBlock Text="{TemplateBinding FrameworkElement.Tag}" Panel.ZIndex="2" Foreground="#FFC0C0C0" TextAlignment="Left" HorizontalAlignment="Stretch" Margin="5,0" VerticalAlignment="Center" />
            <TextBlock Text="{TemplateBinding FrameworkElement.Tag}" Panel.ZIndex="3" Foreground="#222222" TextAlignment="Left" Margin="5,0" HorizontalAlignment="Stretch" VerticalAlignment="Center" Width="{Binding ElementName=rectangle, Path=ActualWidth}">
              <UIElement.Clip>
                <RectangleGeometry>
                  <RectangleGeometry.Rect>
                    <MultiBinding Converter="{StaticResource RectConverter}">
                      <Binding ElementName="Indicator" Path="ActualWidth" />
                      <Binding ElementName="Indicator" Path="ActualHeight" />
                    </MultiBinding>
                  </RectangleGeometry.Rect>
                </RectangleGeometry>
              </UIElement.Clip>
            </TextBlock>
            <Rectangle Name="rectangle" Fill="{TemplateBinding Control.Background}" RadiusY="2" RadiusX="2" />
            <Rectangle Name="PART_Track" Margin="1" />
            <Decorator Name="PART_Indicator" HorizontalAlignment="Left" Margin="1">
              <Grid Name="Foreground">
                <Rectangle Name="Indicator" Fill="{TemplateBinding Control.Foreground}" />
                <Grid Name="Overlay">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition MaxWidth="15" />
                    <ColumnDefinition Width="0.1*" />
                    <ColumnDefinition MaxWidth="15" />
                  </Grid.ColumnDefinitions>
                  <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                  </Grid.RowDefinitions>
                </Grid>
              </Grid>
            </Decorator>
            <Border BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="2" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ProgressBar.Orientation" Value="Vertical">
              <Setter TargetName="TemplateRoot" Property="FrameworkElement.LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="-90" />
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ProgressBar.IsIndeterminate" Value="True">
              <Setter TargetName="Indicator" Property="Visibility" Value="Collapsed" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>