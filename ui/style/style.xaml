<?xml version="1.0" encoding="utf-8"?>
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero" xmlns:UI="clr-namespace:SteamContentPackager.UI.Controls">
  <SolidColorBrush x:Key="BackgroundBrush" Color="{DynamicResource BackgroundColor}" />
  <SolidColorBrush x:Key="BackgroundBrushDark" Color="{DynamicResource BackgroundColorDark}" />
  <SolidColorBrush x:Key="BackgroundBrushLight" Color="{DynamicResource BackgroundColorLight}" />
  <SolidColorBrush x:Key="ForegroundBrush" Color="{DynamicResource ForegroundColor}" />
  <SolidColorBrush x:Key="Disabled.ForegroundBrush" Color="{DynamicResource Disabled.ForegroundColor}" />
  <SolidColorBrush x:Key="MouseOver.ForegroundBrush" Color="{DynamicResource MouseOver.ForegroundColor}" />
  <SolidColorBrush x:Key="ListBox.Static.Background" Color="{DynamicResource BackgroundColorDark}" />
  <SolidColorBrush x:Key="ListBox.Static.Border" Color="{DynamicResource ForegroundColor}" />
  <SolidColorBrush x:Key="ListBox.Disabled.Background" Color="{DynamicResource BackgroundColorDark}" />
  <SolidColorBrush x:Key="ListBox.Disabled.Border" Color="{DynamicResource Disabled.ForegroundColor}" />
  <ControlTemplate x:Key="ScrollViewerControlTemplate1" TargetType="{x:Type ScrollViewer}">
    <Grid Name="Grid" Background="{TemplateBinding Control.Background}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <Grid.RowDefinitions>
        <RowDefinition Height="*" />
        <RowDefinition Height="Auto" />
      </Grid.RowDefinitions>
      <Rectangle Name="Corner" Grid.Column="1" Fill="{TemplateBinding Control.Background}" Grid.Row="1" />
      <ScrollContentPresenter Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" Content="{TemplateBinding ContentControl.Content}" Grid.Column="0" Margin="{TemplateBinding Control.Padding}" Grid.Row="0" />
      <ScrollBar Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}" ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
      <ScrollBar Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}" ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
    </Grid>
  </ControlTemplate>
  <Style x:Key="AppListStyle" TargetType="{x:Type ListBox}">
    <Setter Property="Background" Value="{DynamicResource ListBox.Static.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ListBox.Static.Border}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
    <Setter Property="ScrollViewer.PanningMode" Value="Both" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBox}">
          <Border Name="Bd" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" Padding="1" SnapsToDevicePixels="True">
            <ScrollViewer Focusable="False" Padding="{TemplateBinding Control.Padding}" Template="{StaticResource ScrollViewerControlTemplate1}">
              <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
            </ScrollViewer>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Bd" Value="{DynamicResource ListBox.Disabled.Background}" Property="Border.Background" />
              <Setter TargetName="Bd" Value="{DynamicResource ListBox.Disabled.Border}" Property="Border.BorderBrush" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ItemsControl.IsGrouping" Value="True" />
                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
              </MultiTrigger.Conditions>
              <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="TabItem.Selected.Background" Color="{DynamicResource BackgroundColor}" />
  <SolidColorBrush x:Key="TabItem.Selected.Border" Color="{DynamicResource ForegroundColor}" />
  <Style x:Key="{x:Type TabControl}" TargetType="{x:Type TabControl}">
    <Setter Property="Padding" Value="2" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Background" Value="{DynamicResource TabItem.Selected.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource TabItem.Selected.Border}" />
    <Setter Property="BorderThickness" Value="1,1,1,1" />
    <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabControl}">
          <Grid Name="templateRoot" ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Name="ColumnDefinition0" />
              <ColumnDefinition Name="ColumnDefinition1" Width="0" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Name="RowDefinition0" Height="Auto" />
              <RowDefinition Name="RowDefinition1" Height="*" />
            </Grid.RowDefinitions>
            <TabPanel Name="headerPanel" Background="#00FFFFFF" Grid.Column="0" IsItemsHost="True" Margin="2,2,2,0" Grid.Row="0" KeyboardNavigation.TabIndex="1" ZIndex="1" />
            <Border Name="contentPanel" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
              <ContentPresenter Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Control.Padding}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="TabControl.TabStripPlacement" Value="Bottom">
              <Setter TargetName="headerPanel" Property="Grid.Row" Value="1" />
              <Setter TargetName="contentPanel" Property="Grid.Row" Value="0" />
              <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*" />
              <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="Auto" />
              <Setter TargetName="headerPanel" Property="Margin" Value="2,0,2,2" />
            </Trigger>
            <Trigger Property="TabControl.TabStripPlacement" Value="Left">
              <Setter TargetName="headerPanel" Property="Grid.Row" Value="0" />
              <Setter TargetName="contentPanel" Property="Grid.Row" Value="0" />
              <Setter TargetName="headerPanel" Property="Grid.Column" Value="0" />
              <Setter TargetName="contentPanel" Property="Grid.Column" Value="1" />
              <Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="Auto" />
              <Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="*" />
              <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*" />
              <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0" />
              <Setter TargetName="headerPanel" Property="Margin" Value="2,2,0,2" />
            </Trigger>
            <Trigger Property="TabControl.TabStripPlacement" Value="Right">
              <Setter TargetName="headerPanel" Property="Grid.Row" Value="0" />
              <Setter TargetName="contentPanel" Property="Grid.Row" Value="0" />
              <Setter TargetName="headerPanel" Property="Grid.Column" Value="1" />
              <Setter TargetName="contentPanel" Property="Grid.Column" Value="0" />
              <Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="*" />
              <Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="Auto" />
              <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*" />
              <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0" />
              <Setter TargetName="headerPanel" Property="Margin" Value="0,2,2,2" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="templateRoot" Value="{DynamicResource Disabled.ForegroundColor}" Property="TextElement.Foreground" />
              <Setter TargetName="contentPanel" Value="{DynamicResource Disabled.ForegroundBrush}" Property="Border.BorderBrush" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="FocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="TabItem.Static.Background" Color="{DynamicResource BackgroundColor}" />
  <SolidColorBrush x:Key="TabItem.Static.Border" Color="{DynamicResource ForegroundColor}" />
  <SolidColorBrush x:Key="TabItem.MouseOver.Background" Color="{DynamicResource BackgroundColor}" />
  <SolidColorBrush x:Key="TabItem.MouseOver.Border" Color="{DynamicResource MouseOver.ForegroundColor}" />
  <SolidColorBrush x:Key="TabItem.Disabled.Background" Color="{DynamicResource BackgroundColor}" />
  <SolidColorBrush x:Key="TabItem.Disabled.Border" Color="{DynamicResource Disabled.ForegroundColor}" />
  <Style x:Key="{x:Type TabItem}" TargetType="{x:Type TabItem}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisual}" />
    <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
    <Setter Property="Background" Value="{DynamicResource TabItem.Static.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource TabItem.Static.Border}" />
    <Setter Property="Padding" Value="16,2,16,4" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabItem}">
          <Grid Name="templateRoot" SnapsToDevicePixels="True">
            <Border Name="mainBorder" SnapsToDevicePixels="True" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="1,1,1,0" Background="{TemplateBinding Control.Background}" Margin="0">
              <Border Name="innerBorder" BorderThickness="1,1,1,0" Margin="-1" Opacity="0" BorderBrush="{StaticResource TabItem.Selected.Border}" Background="{StaticResource TabItem.Selected.Background}" />
            </Border>
            <ContentPresenter Name="contentPresenter" ContentSource="Header" Focusable="False" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
          </Grid>
          <ControlTemplate.Triggers>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="true" Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" />
                <Condition Value="Left" Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="mainBorder" Value="{DynamicResource TabItem.MouseOver.Background}" Property="Border.Background" />
              <Setter TargetName="mainBorder" Value="{DynamicResource TabItem.MouseOver.Border}" Property="Border.BorderBrush" />
              <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,1,0,1" />
              <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,1,0,1" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="true" Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" />
                <Condition Value="Bottom" Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="mainBorder" Value="{DynamicResource TabItem.MouseOver.Background}" Property="Border.Background" />
              <Setter TargetName="mainBorder" Value="{DynamicResource TabItem.MouseOver.Border}" Property="Border.BorderBrush" />
              <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,0,1,1" />
              <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,0,1,1" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="true" Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" />
                <Condition Value="Right" Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="mainBorder" Value="{DynamicResource TabItem.MouseOver.Background}" Property="Border.Background" />
              <Setter TargetName="mainBorder" Value="{DynamicResource TabItem.MouseOver.Border}" Property="Border.BorderBrush" />
              <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="0,1,1,1" />
              <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="0,1,1,1" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="true" Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" />
                <Condition Value="Top" Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="1" />
              <Setter TargetName="mainBorder" Value="{DynamicResource TabItem.MouseOver.Background}" Property="Border.Background" />
              <Setter TargetName="mainBorder" Value="{DynamicResource TabItem.MouseOver.Border}" Property="Border.BorderBrush" />
              <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,1,1,0" />
              <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,1,1,0" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="false" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" />
                <Condition Value="Left" Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.56" />
              <Setter TargetName="mainBorder" Value="{DynamicResource TabItem.Disabled.Background}" Property="Border.Background" />
              <Setter TargetName="mainBorder" Value="{DynamicResource TabItem.Disabled.Border}" Property="Border.BorderBrush" />
              <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,1,0,1" />
              <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,1,0,1" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="false" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" />
                <Condition Value="Bottom" Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.56" />
              <Setter TargetName="mainBorder" Value="{DynamicResource TabItem.Disabled.Background}" Property="Border.Background" />
              <Setter TargetName="mainBorder" Value="{DynamicResource TabItem.Disabled.Border}" Property="Border.BorderBrush" />
              <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,0,1,1" />
              <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,0,1,1" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="false" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" />
                <Condition Value="Right" Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.56" />
              <Setter TargetName="mainBorder" Value="{DynamicResource TabItem.Disabled.Background}" Property="Border.Background" />
              <Setter TargetName="mainBorder" Value="{DynamicResource TabItem.Disabled.Border}" Property="Border.BorderBrush" />
              <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="0,1,1,1" />
              <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="0,1,1,1" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="false" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" />
                <Condition Value="Top" Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="mainBorder" Value="{DynamicResource TabItem.Disabled.Background}" Property="Border.Background" />
              <Setter TargetName="mainBorder" Value="{DynamicResource TabItem.Disabled.Border}" Property="Border.BorderBrush" />
              <Setter TargetName="innerBorder" Value="{DynamicResource TabItem.Disabled.Border}" Property="Border.BorderBrush" />
              <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,1,1,0" />
              <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,1,1,0" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="false" Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" />
                <Condition Value="Left" Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,1,0,1" />
              <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,1,0,1" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="true" Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" />
                <Condition Value="Left" Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Panel.ZIndex" Value="1" />
              <Setter Property="Margin" Value="-2,-2,0,-2" />
              <Setter TargetName="innerBorder" Property="UIElement.Opacity" Value="1" />
              <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,1,0,1" />
              <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,1,0,1" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="false" Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" />
                <Condition Value="Bottom" Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,0,1,1" />
              <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,0,1,1" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="true" Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" />
                <Condition Value="Bottom" Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Panel.ZIndex" Value="1" />
              <Setter Property="Margin" Value="-2,0,-2,-2" />
              <Setter TargetName="innerBorder" Property="UIElement.Opacity" Value="1" />
              <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,0,1,1" />
              <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,0,1,1" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="false" Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" />
                <Condition Value="Right" Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="0,1,1,1" />
              <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="0,1,1,1" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="true" Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" />
                <Condition Value="Right" Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Panel.ZIndex" Value="1" />
              <Setter Property="Margin" Value="0,-2,-2,-2" />
              <Setter TargetName="innerBorder" Property="UIElement.Opacity" Value="1" />
              <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="0,1,1,1" />
              <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="0,1,1,1" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="false" Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" />
                <Condition Value="Top" Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,1,1,0" />
              <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="0" />
              <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.75" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="false" Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" />
                <Condition Value="false" Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" />
                <Condition Value="Top" Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,1,1,0" />
              <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="0" />
              <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.75" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="false" Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" />
                <Condition Value="true" Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" />
                <Condition Value="Top" Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,1,1,0" />
              <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="0" />
              <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="1" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="true" Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" />
                <Condition Value="Top" Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Panel.ZIndex" Value="1" />
              <Setter Property="Margin" Value="-2,-2,-2,0" />
              <Setter TargetName="innerBorder" Property="UIElement.Opacity" Value="1" />
              <Setter TargetName="innerBorder" Property="Border.BorderThickness" Value="1,1,1,0" />
              <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="1,1,1,0" />
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="Button.Static.Background" Color="{DynamicResource BackgroundColorLight}" />
  <SolidColorBrush x:Key="Button.Static.Border" Color="{DynamicResource ForegroundColor}" />
  <SolidColorBrush x:Key="Button.MouseOver.Background" Color="{DynamicResource BackgroundColorLight}" />
  <SolidColorBrush x:Key="Button.MouseOver.Border" Color="{DynamicResource MouseOver.ForegroundColor}" />
  <SolidColorBrush x:Key="Button.Pressed.Background" Color="{DynamicResource BackgroundColorDark}" />
  <SolidColorBrush x:Key="Button.Pressed.Border" Color="{DynamicResource MouseOver.ForegroundColor}" />
  <SolidColorBrush x:Key="Button.Disabled.Background" Color="{DynamicResource BackgroundColorLight}" />
  <SolidColorBrush x:Key="Button.Disabled.Border" Color="{DynamicResource Disabled.ForegroundColor}" />
  <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="{DynamicResource Disabled.ForegroundColor}" />
  <Style x:Key="{x:Type Button}" TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisual}" />
    <Setter Property="Background" Value="{DynamicResource Button.Static.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource Button.Static.Border}" />
    <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="1" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Name="border" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True">
            <ContentPresenter Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="True">
              <Setter TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="border" Value="{DynamicResource Button.MouseOver.Background}" Property="Border.Background" />
              <Setter TargetName="border" Value="{DynamicResource Button.MouseOver.Border}" Property="Border.BorderBrush" />
              <Setter TargetName="contentPresenter" Value="{DynamicResource MouseOver.ForegroundBrush}" Property="TextElement.Foreground" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="border" Value="{DynamicResource Button.Pressed.Background}" Property="Border.Background" />
              <Setter TargetName="border" Value="{DynamicResource Button.Pressed.Border}" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="border" Value="{DynamicResource Button.Disabled.Background}" Property="Border.Background" />
              <Setter TargetName="border" Value="{DynamicResource Button.Disabled.Border}" Property="Border.BorderBrush" />
              <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{StaticResource Button.Disabled.Foreground}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="ComboBox.Static.Background" Color="{DynamicResource BackgroundColorLight}" />
  <SolidColorBrush x:Key="ComboBox.Static.Border" Color="{DynamicResource ForegroundColor}" />
  <SolidColorBrush x:Key="ComboBox.Static.Editable.Background" Color="{DynamicResource BackgroundColorLight}" />
  <SolidColorBrush x:Key="ComboBox.Static.Editable.Border" Color="{DynamicResource ForegroundColor}" />
  <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background" Color="Transparent" />
  <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border" Color="Transparent" />
  <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="{DynamicResource MouseOver.ForegroundColor}" />
  <SolidColorBrush x:Key="ComboBox.MouseOver.Background" Color="{DynamicResource BackgroundColorLight}" />
  <SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="{DynamicResource ForegroundColor}" />
  <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background" Color="{DynamicResource BackgroundColorDark}" />
  <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border" Color="{DynamicResource ForegroundColor}" />
  <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Background" Color="Transparent" />
  <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border" Color="Transparent" />
  <SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="{DynamicResource MouseOver.ForegroundColor}" />
  <SolidColorBrush x:Key="ComboBox.Pressed.Background" Color="{DynamicResource BackgroundColorLight}" />
  <SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="{DynamicResource ForegroundColor}" />
  <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background" Color="{DynamicResource BackgroundColorDark}" />
  <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border" Color="{DynamicResource ForegroundColor}" />
  <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Background" Color="Transparent" />
  <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border" Color="Transparent" />
  <SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="{DynamicResource Disabled.ForegroundColor}" />
  <SolidColorBrush x:Key="ComboBox.Disabled.Background" Color="{DynamicResource BackgroundColor}" />
  <SolidColorBrush x:Key="ComboBox.Disabled.Border" Color="{DynamicResource Disabled.ForegroundColor}" />
  <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background" Color="{DynamicResource BackgroundColor}" />
  <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border" Color="{DynamicResource Disabled.ForegroundColor}" />
  <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background" Color="Transparent" />
  <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border" Color="Transparent" />
  <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="#FF606060" />
  <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="ButtonBase.ClickMode" Value="Press" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Name="templateRoot" SnapsToDevicePixels="True" Background="{DynamicResource ComboBox.Static.Background}" BorderThickness="{TemplateBinding Control.BorderThickness}" BorderBrush="{DynamicResource ComboBox.Static.Border}">
            <Border Name="splitBorder" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" SnapsToDevicePixels="True" Margin="0" HorizontalAlignment="Right" BorderThickness="1" BorderBrush="#00FFFFFF">
              <Path Name="arrow" VerticalAlignment="Center" Margin="0" HorizontalAlignment="Center" Fill="{DynamicResource ComboBox.Static.Glyph}" Data="F1 M0,0 L2.667,2.66665 L5.3334,0 L5.3334,-1.78168 L2.6667,0.88501 L0,-1.78168 L0,0" />
            </Border>
          </Border>
          <ControlTemplate.Triggers>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="true" Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
                <Condition Value="false" Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" />
                <Condition Value="false" Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" />
                <Condition Value="true" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="templateRoot" Value="{DynamicResource ComboBox.Static.Editable.Background}" Property="Border.Background" />
              <Setter TargetName="templateRoot" Value="{DynamicResource ComboBox.Static.Editable.Border}" Property="Border.BorderBrush" />
              <Setter TargetName="splitBorder" Value="{DynamicResource ComboBox.Static.Editable.Button.Background}" Property="Border.Background" />
              <Setter TargetName="splitBorder" Value="{DynamicResource ComboBox.Static.Editable.Button.Border}" Property="Border.BorderBrush" />
            </MultiDataTrigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="arrow" Value="{DynamicResource ComboBox.MouseOver.Glyph}" Property="Shape.Fill" />
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="true" Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" />
                <Condition Value="false" Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="templateRoot" Value="{DynamicResource ComboBox.MouseOver.Background}" Property="Border.Background" />
              <Setter TargetName="templateRoot" Value="{DynamicResource ComboBox.MouseOver.Border}" Property="Border.BorderBrush" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="true" Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" />
                <Condition Value="true" Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="templateRoot" Value="{DynamicResource ComboBox.MouseOver.Editable.Background}" Property="Border.Background" />
              <Setter TargetName="templateRoot" Value="{DynamicResource ComboBox.MouseOver.Editable.Border}" Property="Border.BorderBrush" />
              <Setter TargetName="splitBorder" Value="{DynamicResource ComboBox.MouseOver.Editable.Button.Background}" Property="Border.Background" />
              <Setter TargetName="splitBorder" Value="{DynamicResource ComboBox.MouseOver.Editable.Button.Border}" Property="Border.BorderBrush" />
            </MultiDataTrigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="arrow" Value="{DynamicResource ComboBox.Pressed.Glyph}" Property="Shape.Fill" />
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="true" Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" />
                <Condition Value="false" Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="templateRoot" Value="{DynamicResource ComboBox.Pressed.Background}" Property="Border.Background" />
              <Setter TargetName="templateRoot" Value="{DynamicResource ComboBox.Pressed.Border}" Property="Border.BorderBrush" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="true" Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" />
                <Condition Value="true" Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="templateRoot" Value="{DynamicResource ComboBox.Pressed.Editable.Background}" Property="Border.Background" />
              <Setter TargetName="templateRoot" Value="{DynamicResource ComboBox.Pressed.Editable.Border}" Property="Border.BorderBrush" />
              <Setter TargetName="splitBorder" Value="{DynamicResource ComboBox.Pressed.Editable.Button.Background}" Property="Border.Background" />
              <Setter TargetName="splitBorder" Value="{DynamicResource ComboBox.Pressed.Editable.Button.Border}" Property="Border.BorderBrush" />
            </MultiDataTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="arrow" Value="{DynamicResource ComboBox.Disabled.Glyph}" Property="Shape.Fill" />
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="false" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" />
                <Condition Value="false" Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="templateRoot" Value="{DynamicResource ComboBox.Disabled.Background}" Property="Border.Background" />
              <Setter TargetName="templateRoot" Value="{DynamicResource ComboBox.Disabled.Border}" Property="Border.BorderBrush" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="false" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" />
                <Condition Value="true" Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="templateRoot" Value="{DynamicResource ComboBox.Disabled.Editable.Background}" Property="Border.Background" />
              <Setter TargetName="templateRoot" Value="{DynamicResource ComboBox.Disabled.Editable.Border}" Property="Border.BorderBrush" />
              <Setter TargetName="splitBorder" Value="{DynamicResource ComboBox.Disabled.Editable.Button.Background}" Property="Border.Background" />
              <Setter TargetName="splitBorder" Value="{DynamicResource ComboBox.Disabled.Editable.Button.Border}" Property="Border.BorderBrush" />
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
    <Grid Name="templateRoot" SnapsToDevicePixels="True">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*" />
        <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0" />
      </Grid.ColumnDefinitions>
      <Popup Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
        <themes:SystemDropShadowChrome themes:SystemDropShadowChrome.Name="shadow" themes:SystemDropShadowChrome.Color="Transparent" FrameworkElement.MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}" FrameworkElement.MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
          <Border Name="dropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource BackgroundBrushDark}">
            <ScrollViewer Name="DropDownScrollViewer">
              <Grid Name="grid" RenderOptions.ClearTypeHint="Enabled">
                <Canvas Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                  <Rectangle Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}" />
                </Canvas>
                <ItemsPresenter Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
              </Grid>
            </ScrollViewer>
          </Border>
        </themes:SystemDropShadowChrome>
      </Popup>
      <ToggleButton Name="toggleButton" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" Grid.ColumnSpan="2" Style="{StaticResource ComboBoxToggleButton}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
      <ContentPresenter Name="contentPresenter" ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}" Content="{TemplateBinding ComboBox.SelectionBoxItem}" ContentStringFormat="{TemplateBinding ComboBox.SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" IsHitTestVisible="False" Margin="{TemplateBinding Control.Padding}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
        <Setter TargetName="shadow" Property="FrameworkElement.Margin" Value="0,0,5,5" />
        <Setter TargetName="shadow" Property="themes:SystemDropShadowChrome.Color" Value="#71000000" />
      </Trigger>
      <Trigger Property="ItemsControl.HasItems" Value="False">
        <Setter TargetName="dropDownBorder" Property="FrameworkElement.Height" Value="95" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ItemsControl.IsGrouping" Value="True" />
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
      </MultiTrigger>
      <Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="False">
        <Setter TargetName="opaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
        <Setter TargetName="opaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <SolidColorBrush x:Key="TextBox.Static.Background" Color="{DynamicResource BackgroundColorDark}" />
  <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
    <Setter Property="UIElement.AllowDrop" Value="True" />
    <Setter Property="MinWidth" Value="0" />
    <Setter Property="MinHeight" Value="0" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <ScrollViewer Name="PART_ContentHost" Background="#00FFFFFF" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
    <Grid Name="templateRoot" SnapsToDevicePixels="True">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*" />
        <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0" />
      </Grid.ColumnDefinitions>
      <Popup Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
        <themes:SystemDropShadowChrome themes:SystemDropShadowChrome.Name="shadow" themes:SystemDropShadowChrome.Color="Transparent" FrameworkElement.MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}" FrameworkElement.MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
          <Border Name="dropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource BackgroundBrushDark}">
            <ScrollViewer Name="DropDownScrollViewer">
              <Grid Name="grid" RenderOptions.ClearTypeHint="Enabled">
                <Canvas Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                  <Rectangle Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}" />
                </Canvas>
                <ItemsPresenter Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
              </Grid>
            </ScrollViewer>
          </Border>
        </themes:SystemDropShadowChrome>
      </Popup>
      <ToggleButton Name="toggleButton" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" Grid.ColumnSpan="2" Style="{StaticResource ComboBoxToggleButton}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
      <Border Name="border" Margin="{TemplateBinding Control.BorderThickness}" Background="{StaticResource TextBox.Static.Background}">
        <TextBox Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" Style="{StaticResource ComboBoxEditableTextBox}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" />
      </Border>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter TargetName="border" Property="UIElement.Opacity" Value="0.56" />
      </Trigger>
      <Trigger Property="UIElement.IsKeyboardFocusWithin" Value="True" />
      <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
        <Setter TargetName="shadow" Property="FrameworkElement.Margin" Value="0,0,5,5" />
        <Setter TargetName="shadow" Property="themes:SystemDropShadowChrome.Color" Value="#71000000" />
      </Trigger>
      <Trigger Property="ItemsControl.HasItems" Value="False">
        <Setter TargetName="dropDownBorder" Property="FrameworkElement.Height" Value="95" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ItemsControl.IsGrouping" Value="True" />
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
      </MultiTrigger>
      <Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="False">
        <Setter TargetName="opaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
        <Setter TargetName="opaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisual}" />
    <Setter Property="Background" Value="{DynamicResource ComboBox.Static.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ComboBox.Static.Border}" />
    <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="Padding" Value="6,3,5,3" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
    <Setter Property="ScrollViewer.PanningMode" Value="Both" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}" />
    <Style.Triggers>
      <Trigger Property="ComboBox.IsEditable" Value="True">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <SolidColorBrush x:Key="TextBox.Static.Border" Color="{DynamicResource ForegroundColor}" />
  <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="{DynamicResource ForegroundColor}" />
  <SolidColorBrush x:Key="TextBox.Focus.Border" Color="{DynamicResource MouseOver.ForegroundColor}" />
  <Style x:Key="{x:Type TextBox}" TargetType="{x:Type TextBox}">
    <Setter Property="Background" Value="{DynamicResource BackgroundBrushDark}" />
    <Setter Property="BorderBrush" Value="{DynamicResource TextBox.Static.Border}" />
    <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="UIElement.AllowDrop" Value="True" />
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Border Name="border" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True">
            <ScrollViewer Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Template="{StaticResource ScrollViewerControlTemplate1}" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="border" Property="UIElement.Opacity" Value="0.56" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="border" Value="{DynamicResource TextBox.MouseOver.Border}" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="True">
              <Setter TargetName="border" Value="{DynamicResource TextBox.Focus.Border}" Property="Border.BorderBrush" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="TextBoxBase.IsInactiveSelectionHighlightEnabled" Value="True" />
          <Condition Property="TextBoxBase.IsSelectionActive" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="TextBoxBase.SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{x:Type PasswordBox}" TargetType="{x:Type PasswordBox}">
    <Setter Property="PasswordBox.PasswordChar" Value="●" />
    <Setter Property="Background" Value="{DynamicResource BackgroundBrushDark}" />
    <Setter Property="BorderBrush" Value="{DynamicResource TextBox.Static.Border}" />
    <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="UIElement.AllowDrop" Value="True" />
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type PasswordBox}">
          <Border Name="border" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True">
            <ScrollViewer Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="border" Property="UIElement.Opacity" Value="0.56" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="border" Value="{DynamicResource TextBox.MouseOver.Border}" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="True">
              <Setter TargetName="border" Value="{DynamicResource TextBox.Focus.Border}" Property="Border.BorderBrush" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="PasswordBox.IsInactiveSelectionHighlightEnabled" Value="True" />
          <Condition Property="PasswordBox.IsSelectionActive" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="PasswordBox.SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <SolidColorBrush x:Key="Item.MouseOver.Background" Color="{DynamicResource ForegroundColor}" />
  <SolidColorBrush x:Key="Item.MouseOver.Border" Color="#a826A0Da" />
  <SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="{DynamicResource ForegroundColor}" />
  <SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="#FFDADADA" />
  <SolidColorBrush x:Key="Item.SelectedActive.Background" Color="{DynamicResource MouseOver.ForegroundColor}" />
  <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="#FF26A0DA" />
  <Style x:Key="{x:Type ListBoxItem}" TargetType="{x:Type ListBoxItem}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="Padding" Value="4,1" />
    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="BorderBrush" Value="#00FFFFFF" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisual}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Border Name="Bd" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}" SnapsToDevicePixels="True">
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Border.Background" Value="{StaticResource Item.MouseOver.Background}" />
              <Setter TargetName="Bd" Value="{DynamicResource BackgroundBrush}" Property="TextElement.Foreground" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Selector.IsSelectionActive" Value="False" />
                <Condition Property="ListBoxItem.IsSelected" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Border.Background" Value="{StaticResource Item.SelectedInactive.Background}" />
              <Setter TargetName="Bd" Value="{DynamicResource BackgroundBrush}" Property="TextElement.Foreground" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Selector.IsSelectionActive" Value="True" />
                <Condition Property="ListBoxItem.IsSelected" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Border.Background" Value="{StaticResource Item.SelectedActive.Background}" />
              <Setter TargetName="Bd" Value="{DynamicResource BackgroundBrush}" Property="TextElement.Foreground" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="TextElement.Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <BorderGapMaskConverter x:Key="BorderGapMaskConverter" />
  <Style x:Key="{x:Type GroupBox}" TargetType="{x:Type GroupBox}">
    <Setter Property="BorderBrush" Value="{DynamicResource ForegroundBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type GroupBox}">
          <Grid SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="6" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="6" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
              <RowDefinition Height="6" />
            </Grid.RowDefinitions>
            <Border BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Grid.ColumnSpan="4" CornerRadius="0" Grid.Row="1" Grid.RowSpan="3">
              <UIElement.OpacityMask>
                <MultiBinding ConverterParameter="7" Converter="{StaticResource BorderGapMaskConverter}">
                  <Binding ElementName="Header" Path="ActualWidth" />
                  <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
                  <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
                </MultiBinding>
              </UIElement.OpacityMask>
            </Border>
            <Border Name="Header" Grid.Column="1" Padding="3,1,3,0" Grid.Row="0" Grid.RowSpan="2">
              <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
            </Border>
            <ContentPresenter Grid.ColumnSpan="2" Grid.Column="1" Margin="{TemplateBinding Control.Padding}" Grid.Row="2" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Value="{DynamicResource Disabled.ForegroundBrush}" Property="BorderBrush" />
              <Setter TargetName="Header" Value="{DynamicResource Disabled.ForegroundBrush}" Property="TextElement.Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TaskItemCloseButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisual}" />
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="BorderBrush" Value="#00FFFFFF" />
    <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="FontSize" Value="18" />
    <Setter Property="FontFamily" Value="Consolas" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Name="border" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True">
            <ContentPresenter Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="True" />
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="#FFFF0000" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="border" Value="{DynamicResource Button.Disabled.Background}" Property="Border.Background" />
              <Setter TargetName="border" Value="{DynamicResource Button.Disabled.Border}" Property="Border.BorderBrush" />
              <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{StaticResource Button.Disabled.Foreground}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TaskListItemStyle" TargetType="{x:Type ListBoxItem}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="Padding" Value="4,1" />
    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="BorderBrush" Value="#00FFFFFF" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Margin" Value="5,0" />
    <Setter Property="Padding" Value="0,2,0,5" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisual}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Border Name="Bd" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}" SnapsToDevicePixels="True">
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Value="{DynamicResource ForegroundBrush}" Property="Border.BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Selector.IsSelectionActive" Value="False" />
                <Condition Property="ListBoxItem.IsSelected" Value="True" />
              </MultiTrigger.Conditions>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Selector.IsSelectionActive" Value="True" />
                <Condition Property="ListBoxItem.IsSelected" Value="True" />
              </MultiTrigger.Conditions>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="TextElement.Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="ProgressBar.Progress" Color="{DynamicResource ForegroundColor}" />
  <SolidColorBrush x:Key="ProgressBar.Background" Color="{DynamicResource BackgroundColorDark}" />
  <SolidColorBrush x:Key="ProgressBar.Border" Color="{DynamicResource ForegroundColor}" />
  <Style x:Key="{x:Type ProgressBar}" TargetType="{x:Type ProgressBar}">
    <Setter Property="Foreground" Value="{StaticResource ProgressBar.Progress}" />
    <Setter Property="Background" Value="{StaticResource ProgressBar.Background}" />
    <Setter Property="BorderBrush" Value="{StaticResource ProgressBar.Border}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ProgressBar}">
          <Grid Name="TemplateRoot">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Determinate" />
                <VisualState x:Name="Indeterminate">
                  <Storyboard RepeatBehavior="Forever">
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="Animation">
                      <EasingDoubleKeyFrame KeyTime="0" Value="0.25" />
                      <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25" />
                      <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25" />
                    </DoubleAnimationUsingKeyFrames>
                    <PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)" Storyboard.TargetName="Animation">
                      <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5" />
                      <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5" />
                      <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5" />
                    </PointAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" />
            <Rectangle Name="PART_Track" />
            <Grid Name="PART_Indicator" ClipToBounds="True" HorizontalAlignment="Left">
              <Rectangle Name="Indicator" Fill="{TemplateBinding Control.Foreground}" />
              <Rectangle Name="Animation" Fill="{TemplateBinding Control.Foreground}" RenderTransformOrigin="0.5,0.5">
                <UIElement.RenderTransform>
                  <TransformGroup>
                    <ScaleTransform />
                    <SkewTransform />
                    <RotateTransform />
                    <TranslateTransform />
                  </TransformGroup>
                </UIElement.RenderTransform>
              </Rectangle>
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ProgressBar.Orientation" Value="Vertical">
              <Setter TargetName="TemplateRoot" Property="FrameworkElement.LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="-90" />
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ProgressBar.IsIndeterminate" Value="True">
              <Setter TargetName="Indicator" Property="Visibility" Value="Collapsed" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="OptionMark.Static.Background" Color="{DynamicResource BackgroundColorDark}" />
  <SolidColorBrush x:Key="OptionMark.Static.Border" Color="{DynamicResource ForegroundColor}" />
  <SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="{DynamicResource BackgroundColorDark}" />
  <SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="{DynamicResource MouseOver.ForegroundColor}" />
  <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="{DynamicResource MouseOver.ForegroundColor}" />
  <SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="{DynamicResource BackgroundColorDark}" />
  <SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="{DynamicResource Disabled.ForegroundColor}" />
  <SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="{DynamicResource Disabled.ForegroundColor}" />
  <SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="{DynamicResource BackgroundColorDark}" />
  <SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="{DynamicResource MouseOver.ForegroundColor}" />
  <SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="{DynamicResource MouseOver.ForegroundColor}" />
  <SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="{DynamicResource ForegroundColor}" />
  <Style x:Key="{x:Type CheckBox}" TargetType="{x:Type CheckBox}">
    <Setter Property="Background" Value="{DynamicResource OptionMark.Static.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource OptionMark.Static.Border}" />
    <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
          <Grid Name="templateRoot" Background="#00FFFFFF" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Border Name="checkBoxBorder" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}">
              <Grid Name="markGrid">
                <Path Name="optionMark" Data="F1 M9.97498,1.22334 L4.6983,9.09834 L4.52164,9.09834 L0,5.19331 L1.27664,3.52165 L4.255,6.08833 L8.33331,1.52588E-05 L9.97498,1.22334" Margin="1" Opacity="0" Stretch="None" Fill="{StaticResource OptionMark.Static.Glyph}" />
                <Rectangle Name="indeterminateMark" Margin="2" Opacity="0" Fill="{StaticResource OptionMark.Static.Glyph}" />
              </Grid>
            </Border>
            <ContentPresenter Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="HasContent" Value="True">
              <Setter Property="Padding" Value="4,-1,0,0" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="checkBoxBorder" Property="Border.Background" Value="{StaticResource OptionMark.MouseOver.Background}" />
              <Setter TargetName="checkBoxBorder" Property="Border.BorderBrush" Value="{StaticResource OptionMark.MouseOver.Border}" />
              <Setter TargetName="optionMark" Property="Shape.Fill" Value="{StaticResource OptionMark.MouseOver.Glyph}" />
              <Setter TargetName="indeterminateMark" Property="Shape.Fill" Value="{StaticResource OptionMark.MouseOver.Glyph}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="checkBoxBorder" Property="Border.Background" Value="{StaticResource OptionMark.Disabled.Background}" />
              <Setter TargetName="checkBoxBorder" Property="Border.BorderBrush" Value="{StaticResource OptionMark.Disabled.Border}" />
              <Setter TargetName="optionMark" Property="Shape.Fill" Value="{StaticResource OptionMark.Disabled.Glyph}" />
              <Setter TargetName="indeterminateMark" Property="Shape.Fill" Value="{StaticResource OptionMark.Disabled.Glyph}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="checkBoxBorder" Property="Border.Background" Value="{StaticResource OptionMark.Pressed.Background}" />
              <Setter TargetName="checkBoxBorder" Property="Border.BorderBrush" Value="{StaticResource OptionMark.Pressed.Border}" />
              <Setter TargetName="optionMark" Property="Shape.Fill" Value="{StaticResource OptionMark.Pressed.Glyph}" />
              <Setter TargetName="indeterminateMark" Property="Shape.Fill" Value="{StaticResource OptionMark.Pressed.Glyph}" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="optionMark" Property="UIElement.Opacity" Value="1" />
              <Setter TargetName="indeterminateMark" Property="UIElement.Opacity" Value="0" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="{x:Null}">
              <Setter TargetName="optionMark" Property="UIElement.Opacity" Value="0" />
              <Setter TargetName="indeterminateMark" Property="UIElement.Opacity" Value="1" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="ScrollBar.Static.Background" Color="{DynamicResource BackgroundColor}" />
  <SolidColorBrush x:Key="ScrollBar.Static.Border" Color="Transparent" />
  <SolidColorBrush x:Key="ScrollBar.Pressed.Glyph" Color="{DynamicResource MouseOver.ForegroundColor}" />
  <SolidColorBrush x:Key="ScrollBar.MouseOver.Glyph" Color="{DynamicResource MouseOver.ForegroundColor}" />
  <SolidColorBrush x:Key="ScrollBar.Disabled.Glyph" Color="{DynamicResource Disabled.ForegroundColor}" />
  <SolidColorBrush x:Key="ScrollBar.Static.Glyph" Color="{DynamicResource ForegroundColor}" />
  <SolidColorBrush x:Key="ScrollBar.MouseOver.Background" Color="{DynamicResource BackgroundColor}" />
  <SolidColorBrush x:Key="ScrollBar.MouseOver.Border" Color="Transparent" />
  <SolidColorBrush x:Key="ScrollBar.Pressed.Background" Color="{DynamicResource BackgroundColorDark}" />
  <SolidColorBrush x:Key="ScrollBar.Pressed.Border" Color="Transparent" />
  <SolidColorBrush x:Key="ScrollBar.Disabled.Background" Color="{DynamicResource BackgroundColorDark}" />
  <SolidColorBrush x:Key="ScrollBar.Disabled.Border" Color="Transparent" />
  <Style x:Key="ScrollBarButton" TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisual}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="-1" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border Name="border" BorderThickness="1" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True" BorderBrush="{StaticResource ScrollBar.Static.Border}">
            <ContentPresenter Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="border" Property="Border.Background" Value="{StaticResource ScrollBar.MouseOver.Background}" />
              <Setter TargetName="border" Property="Border.BorderBrush" Value="{StaticResource ScrollBar.MouseOver.Border}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="border" Property="Border.Background" Value="{StaticResource ScrollBar.Pressed.Background}" />
              <Setter TargetName="border" Property="Border.BorderBrush" Value="{StaticResource ScrollBar.Pressed.Border}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.56" />
              <Setter TargetName="border" Property="Border.Background" Value="{StaticResource ScrollBar.Disabled.Background}" />
              <Setter TargetName="border" Property="Border.BorderBrush" Value="{StaticResource ScrollBar.Disabled.Border}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Rectangle Fill="{TemplateBinding Control.Background}" Height="{TemplateBinding FrameworkElement.Height}" Width="{TemplateBinding FrameworkElement.Width}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="ScrollBar.MouseOver.Thumb" Color="{DynamicResource MouseOver.ForegroundColor}" />
  <SolidColorBrush x:Key="ScrollBar.Pressed.Thumb" Color="{DynamicResource MouseOver.ForegroundColor}" />
  <SolidColorBrush x:Key="ScrollBar.Static.Thumb" Color="{DynamicResource ForegroundColor}" />
  <Style x:Key="ScrollBarThumbVertical" TargetType="{x:Type Thumb}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
    <Setter Property="Width" Value="12" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Rectangle Name="rectangle" Margin="2,0" Height="{TemplateBinding FrameworkElement.Height}" SnapsToDevicePixels="True" Width="{TemplateBinding FrameworkElement.Width}" Fill="{StaticResource ScrollBar.Static.Thumb}" />
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="rectangle" Property="Shape.Fill" Value="{StaticResource ScrollBar.MouseOver.Thumb}" />
            </Trigger>
            <Trigger Property="Thumb.IsDragging" Value="True">
              <Setter TargetName="rectangle" Property="Shape.Fill" Value="{StaticResource ScrollBar.Pressed.Thumb}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ScrollBarThumbHorizontal" TargetType="{x:Type Thumb}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
    <Setter Property="Height" Value="10" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Rectangle Name="rectangle" Height="{TemplateBinding FrameworkElement.Height}" SnapsToDevicePixels="True" Width="{TemplateBinding FrameworkElement.Width}" Fill="{StaticResource ScrollBar.Static.Thumb}" />
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="rectangle" Property="Shape.Fill" Value="{StaticResource ScrollBar.MouseOver.Thumb}" />
            </Trigger>
            <Trigger Property="Thumb.IsDragging" Value="True">
              <Setter TargetName="rectangle" Property="Shape.Fill" Value="{StaticResource ScrollBar.Pressed.Thumb}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Background" Value="{StaticResource ScrollBar.Static.Background}" />
    <Setter Property="BorderBrush" Value="{StaticResource ScrollBar.Static.Border}" />
    <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
    <Setter Property="BorderThickness" Value="1,0" />
    <Setter Property="Width" Value="14" />
    <Setter Property="MinWidth" Value="14" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollBar}">
          <Grid Name="Bg" SnapsToDevicePixels="True">
            <Grid.RowDefinitions>
              <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
              <RowDefinition Height="0.00001*" />
              <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
            </Grid.RowDefinitions>
            <Border BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" Grid.Row="1" />
            <RepeatButton Name="PART_LineUpButton" Command="{x:Static ScrollBar.LineUpCommand}" IsEnabled="{TemplateBinding UIElement.IsMouseOver}" Style="{StaticResource ScrollBarButton}">
              <Path Name="ArrowTop" Data="M0,4 C0,4 0,6 0,6 C0,6 3.5,2.5 3.5,2.5 C3.5,2.5 7,6 7,6 C7,6 7,4 7,4 C7,4 3.5,0.5 3.5,0.5 C3.5,0.5 0,4 0,4" Margin="3" Stretch="Uniform" Fill="{StaticResource ScrollBar.Static.Glyph}" />
            </RepeatButton>
            <Track Name="PART_Track" IsDirectionReversed="True" IsEnabled="{TemplateBinding UIElement.IsMouseOver}" Grid.Row="1">
              <Track.DecreaseRepeatButton>
                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource RepeatButtonTransparent}" />
              </Track.DecreaseRepeatButton>
              <Track.IncreaseRepeatButton>
                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource RepeatButtonTransparent}" />
              </Track.IncreaseRepeatButton>
              <Track.Thumb>
                <Thumb Style="{StaticResource ScrollBarThumbVertical}" />
              </Track.Thumb>
            </Track>
            <RepeatButton Name="PART_LineDownButton" Command="{x:Static ScrollBar.LineDownCommand}" IsEnabled="{TemplateBinding UIElement.IsMouseOver}" Grid.Row="2" Style="{StaticResource ScrollBarButton}">
              <Path Name="ArrowBottom" Data="M0,2.5 C0,2.5 0,0.5 0,0.5 C0,0.5 3.5,4 3.5,4 C3.5,4 7,0.5 7,0.5 C7,0.5 7,2.5 7,2.5 C7,2.5 3.5,6 3.5,6 C3.5,6 0,2.5 0,2.5" Margin="3" Stretch="Uniform" Fill="{StaticResource ScrollBar.Static.Glyph}" />
            </RepeatButton>
          </Grid>
          <ControlTemplate.Triggers>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="true" Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" />
                <Condition Value="true" Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="ArrowBottom" Property="Shape.Fill" Value="{StaticResource ScrollBar.Pressed.Glyph}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="true" Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" />
                <Condition Value="true" Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="ArrowTop" Property="Shape.Fill" Value="{StaticResource ScrollBar.Pressed.Glyph}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="true" Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" />
                <Condition Value="false" Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="ArrowBottom" Property="Shape.Fill" Value="{StaticResource ScrollBar.MouseOver.Glyph}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Value="true" Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" />
                <Condition Value="false" Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="ArrowTop" Property="Shape.Fill" Value="{StaticResource ScrollBar.MouseOver.Glyph}" />
            </MultiDataTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="ArrowTop" Property="Shape.Fill" Value="{StaticResource ScrollBar.Disabled.Glyph}" />
              <Setter TargetName="ArrowBottom" Property="Shape.Fill" Value="{StaticResource ScrollBar.Disabled.Glyph}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="ScrollBar.Orientation" Value="Horizontal">
        <Setter Property="Width" Value="Auto" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Height" Value="14" />
        <Setter Property="MinHeight" Value="14" />
        <Setter Property="BorderThickness" Value="0,1" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ScrollBar}">
              <Grid Name="Bg" SnapsToDevicePixels="True">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
                  <ColumnDefinition Width="0.00001*" />
                  <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
                </Grid.ColumnDefinitions>
                <Border BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" Grid.Column="1" />
                <RepeatButton Name="PART_LineLeftButton" Command="{x:Static ScrollBar.LineLeftCommand}" IsEnabled="{TemplateBinding UIElement.IsMouseOver}" Style="{StaticResource ScrollBarButton}">
                  <Path Name="ArrowLeft" Data="M3.18,7 C3.18,7 5,7 5,7 C5,7 1.81,3.5 1.81,3.5 C1.81,3.5 5,0 5,0 C5,0 3.18,0 3.18,0 C3.18,0 0,3.5 0,3.5 C0,3.5 3.18,7 3.18,7" Margin="3" Stretch="Uniform" Fill="{StaticResource ScrollBar.Static.Glyph}" />
                </RepeatButton>
                <Track Name="PART_Track" Grid.Column="1" IsEnabled="{TemplateBinding UIElement.IsMouseOver}">
                  <Track.DecreaseRepeatButton>
                    <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource RepeatButtonTransparent}" />
                  </Track.DecreaseRepeatButton>
                  <Track.IncreaseRepeatButton>
                    <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource RepeatButtonTransparent}" />
                  </Track.IncreaseRepeatButton>
                  <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumbHorizontal}" />
                  </Track.Thumb>
                </Track>
                <RepeatButton Name="PART_LineRightButton" Grid.Column="2" Command="{x:Static ScrollBar.LineRightCommand}" IsEnabled="{TemplateBinding UIElement.IsMouseOver}" Style="{StaticResource ScrollBarButton}">
                  <Path Name="ArrowRight" Data="M1.81,7 C1.81,7 0,7 0,7 C0,7 3.18,3.5 3.18,3.5 C3.18,3.5 0,0 0,0 C0,0 1.81,0 1.81,0 C1.81,0 5,3.5 5,3.5 C5,3.5 1.81,7 1.81,7" Margin="3" Stretch="Uniform" Fill="{StaticResource ScrollBar.Static.Glyph}" />
                </RepeatButton>
              </Grid>
              <ControlTemplate.Triggers>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Value="true" Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" />
                    <Condition Value="true" Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" />
                  </MultiDataTrigger.Conditions>
                  <Setter TargetName="ArrowRight" Property="Shape.Fill" Value="{StaticResource ScrollBar.Pressed.Glyph}" />
                </MultiDataTrigger>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Value="true" Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" />
                    <Condition Value="true" Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" />
                  </MultiDataTrigger.Conditions>
                  <Setter TargetName="ArrowLeft" Property="Shape.Fill" Value="{StaticResource ScrollBar.Pressed.Glyph}" />
                </MultiDataTrigger>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Value="true" Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" />
                    <Condition Value="false" Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" />
                  </MultiDataTrigger.Conditions>
                  <Setter TargetName="ArrowRight" Property="Shape.Fill" Value="{StaticResource ScrollBar.MouseOver.Glyph}" />
                </MultiDataTrigger>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Value="true" Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" />
                    <Condition Value="false" Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" />
                  </MultiDataTrigger.Conditions>
                  <Setter TargetName="ArrowLeft" Property="Shape.Fill" Value="{StaticResource ScrollBar.MouseOver.Glyph}" />
                </MultiDataTrigger>
                <Trigger Property="IsEnabled" Value="False">
                  <Setter TargetName="ArrowLeft" Property="Shape.Fill" Value="{StaticResource ScrollBar.Disabled.Glyph}" />
                  <Setter TargetName="ArrowRight" Property="Shape.Fill" Value="{StaticResource ScrollBar.Disabled.Glyph}" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="LogBoxItemStyle" TargetType="{x:Type ListBoxItem}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="Padding" Value="4,1" />
    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="BorderBrush" Value="#00FFFFFF" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisual}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Border Name="Bd" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}" SnapsToDevicePixels="True">
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Selector.IsSelectionActive" Value="False" />
                <Condition Property="ListBoxItem.IsSelected" Value="True" />
              </MultiTrigger.Conditions>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Selector.IsSelectionActive" Value="True" />
                <Condition Property="ListBoxItem.IsSelected" Value="True" />
              </MultiTrigger.Conditions>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="TextElement.Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHover.Background" Color="{DynamicResource ForegroundColor}" />
  <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHover.Border" Color="#A826A0DA" />
  <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelected.Background" Color="{DynamicResource MouseOver.ForegroundColor}" />
  <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelected.Border" Color="#FF26A0DA" />
  <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedHover.Background" Color="{DynamicResource MouseOver.ForegroundColor}" />
  <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedHover.Border" Color="#99006CD9" />
  <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedNoFocus.Background" Color="{DynamicResource ForegroundColor}" />
  <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedNoFocus.Border" Color="#FFDADADA" />
  <SolidColorBrush x:Key="ComboBoxItem.ItemsviewFocus.Border" Color="#FF26A0DA" />
  <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHoverFocus.Background" Color="{DynamicResource MouseOver.ForegroundColor}" />
  <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHoverFocus.Border" Color="#FF26A0DA" />
  <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="Padding" Value="4,1" />
    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="BorderBrush" Value="#00FFFFFF" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisual}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
          <Border Name="Bd" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}" SnapsToDevicePixels="True">
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="TextElement.Foreground" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="False" />
                <Condition Property="UIElement.IsMouseOver" Value="True" />
                <Condition Property="UIElement.IsKeyboardFocused" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Border.Background" Value="{StaticResource ComboBoxItem.ItemsviewHover.Background}" />
              <Setter TargetName="Bd" Property="Border.BorderBrush" Value="{StaticResource ComboBoxItem.ItemsviewHover.Border}" />
              <Setter TargetName="Bd" Value="{DynamicResource BackgroundBrush}" Property="TextElement.Foreground" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="True" />
                <Condition Property="UIElement.IsMouseOver" Value="False" />
                <Condition Property="UIElement.IsKeyboardFocused" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Border.Background" Value="{StaticResource ComboBoxItem.ItemsviewSelected.Background}" />
              <Setter TargetName="Bd" Property="Border.BorderBrush" Value="{StaticResource ComboBoxItem.ItemsviewSelected.Border}" />
              <Setter TargetName="Bd" Value="{DynamicResource BackgroundBrush}" Property="TextElement.Foreground" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="True" />
                <Condition Property="UIElement.IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Border.Background" Value="{StaticResource ComboBoxItem.ItemsviewSelectedHover.Background}" />
              <Setter TargetName="Bd" Property="Border.BorderBrush" Value="{StaticResource ComboBoxItem.ItemsviewSelectedHover.Border}" />
              <Setter TargetName="Bd" Value="{DynamicResource BackgroundBrush}" Property="TextElement.Foreground" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="True" />
                <Condition Property="UIElement.IsMouseOver" Value="False" />
                <Condition Property="UIElement.IsKeyboardFocused" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Border.Background" Value="{StaticResource ComboBoxItem.ItemsviewSelectedNoFocus.Background}" />
              <Setter TargetName="Bd" Property="Border.BorderBrush" Value="{StaticResource ComboBoxItem.ItemsviewSelectedNoFocus.Border}" />
              <Setter TargetName="Bd" Value="{DynamicResource BackgroundBrush}" Property="TextElement.Foreground" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="False" />
                <Condition Property="UIElement.IsMouseOver" Value="False" />
                <Condition Property="UIElement.IsKeyboardFocused" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Border.BorderBrush" Value="{StaticResource ComboBoxItem.ItemsviewFocus.Border}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="False" />
                <Condition Property="UIElement.IsMouseOver" Value="True" />
                <Condition Property="UIElement.IsKeyboardFocused" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Border.Background" Value="{StaticResource ComboBoxItem.ItemsviewHoverFocus.Background}" />
              <Setter TargetName="Bd" Property="Border.BorderBrush" Value="{StaticResource ComboBoxItem.ItemsviewHoverFocus.Border}" />
              <Setter TargetName="Bd" Value="{DynamicResource BackgroundBrush}" Property="TextElement.Foreground" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="ListBorder" Color="{DynamicResource ForegroundColor}" />
  <Style x:Key="{x:Type ListView}" TargetType="{x:Type ListView}">
    <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ForegroundBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
    <Setter Property="ScrollViewer.PanningMode" Value="Both" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListView}">
          <themes:ListBoxChrome themes:ListBoxChrome.Name="Bd" themes:ListBoxChrome.BorderBrush="{TemplateBinding Control.BorderBrush}" themes:ListBoxChrome.BorderThickness="{TemplateBinding Control.BorderThickness}" themes:ListBoxChrome.Background="{TemplateBinding Control.Background}" themes:ListBoxChrome.RenderMouseOver="{TemplateBinding UIElement.IsMouseOver}" themes:ListBoxChrome.RenderFocused="{TemplateBinding UIElement.IsKeyboardFocusWithin}" UIElement.SnapsToDevicePixels="True">
            <ScrollViewer Padding="{TemplateBinding Control.Padding}" Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
              <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
            </ScrollViewer>
          </themes:ListBoxChrome>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Property="themes:ListBoxChrome.Background" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ItemsControl.IsGrouping" Value="True" />
                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
              </MultiTrigger.Conditions>
              <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type DataGrid}" TargetType="{x:Type DataGrid}">
    <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ForegroundBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="DataGrid.RowDetailsVisibilityMode" Value="VisibleWhenSelected" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
    <Setter Property="ScrollViewer.PanningMode" Value="Both" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGrid}">
          <Border BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}" SnapsToDevicePixels="True">
            <ScrollViewer Name="DG_ScrollViewer" Focusable="False">
              <Control.Template>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="*" />
                      <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Button Command="{x:Static DataGrid.SelectAllCommand}" Focusable="False" Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                    <DataGridColumnHeadersPresenter Name="PART_ColumnHeadersPresenter" Grid.Column="1" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                    <ScrollContentPresenter Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" Grid.ColumnSpan="2" Grid.Row="1" />
                    <ScrollBar Name="PART_VerticalScrollBar" Grid.Column="2" Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}" Orientation="Vertical" Grid.Row="1" Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}" ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                    <Grid Column="1" Row="2">
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                        <ColumnDefinition Width="*" />
                      </Grid.ColumnDefinitions>
                      <ScrollBar Name="PART_HorizontalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}" Orientation="Horizontal" Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}" ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Grid>
                  </Grid>
                </ControlTemplate>
              </Control.Template>
              <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
            </ScrollViewer>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ItemsControl.IsGrouping" Value="True" />
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{x:Type DataGridCell}" TargetType="{x:Type DataGridCell}">
    <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
    <Setter Property="BorderBrush" Value="#00FFFFFF" />
    <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGridCell}">
          <Border BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True">
            <ContentPresenter Margin="5,0" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="DataGridCell.IsSelected" Value="True">
        <Setter Property="Background" Value="{DynamicResource ForegroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource BackgroundBrush}" />
      </Trigger>
      <Trigger Property="UIElement.IsKeyboardFocusWithin" Value="True">
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{x:Type DataGridRow}" TargetType="{x:Type DataGridRow}">
    <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
    <Setter Property="DataGridRow.ValidationErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <TextBlock Foreground="#FFFF0000" Margin="2,0,0,0" Text="!" VerticalAlignment="Center" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGridRow}">
          <Border Name="DGR_Border" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True">
            <SelectiveScrollingGrid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <DataGridCellsPresenter Grid.Column="1" ItemsPanel="{TemplateBinding DataGridRow.ItemsPanel}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
              <DataGridDetailsPresenter Grid.Column="1" Grid.Row="1" Visibility="{TemplateBinding DataGridRow.DetailsVisibility}" SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}, Converter={x:Static DataGrid.RowDetailsScrollingConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
              <DataGridRowHeader Grid.RowSpan="2" SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Row}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
            </SelectiveScrollingGrid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="DataGridRow.IsNewItem" Value="True">
        <Setter Property="Margin" Value="{Binding NewItemMargin, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
      </Trigger>
      <Trigger Property="DataGridRow.IsSelected" Value="True">
        <Setter Property="Background" Value="{DynamicResource ForegroundBrush}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
    <Setter Property="Width" Value="8" />
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="FrameworkElement.Cursor" Value="SizeWE" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type DataGridColumnHeader}" TargetType="{x:Type DataGridColumnHeader}">
    <Setter Property="Background" Value="{DynamicResource BackgroundBrushLight}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ForegroundBrush}" />
    <Setter Property="BorderThickness" Value="0.5" />
    <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
          <Grid>
            <themes:DataGridHeaderBorder Border.BorderBrush="{TemplateBinding Control.BorderBrush}" Border.BorderThickness="{TemplateBinding Control.BorderThickness}" Border.Background="{TemplateBinding Control.Background}" themes:DataGridHeaderBorder.IsClickable="{TemplateBinding DataGridColumnHeader.CanUserSort}" themes:DataGridHeaderBorder.IsPressed="{TemplateBinding ButtonBase.IsPressed}" themes:DataGridHeaderBorder.IsHovered="{TemplateBinding UIElement.IsMouseOver}" Border.Padding="{TemplateBinding Control.Padding}" themes:DataGridHeaderBorder.SortDirection="{TemplateBinding DataGridColumnHeader.SortDirection}" themes:DataGridHeaderBorder.SeparatorBrush="{TemplateBinding DataGridColumnHeader.SeparatorBrush}" themes:DataGridHeaderBorder.SeparatorVisibility="{TemplateBinding DataGridColumnHeader.SeparatorVisibility}">
              <ContentPresenter Margin="5,0" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
            </themes:DataGridHeaderBorder>
            <Thumb Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" Style="{StaticResource ColumnHeaderGripperStyle}" />
            <Thumb Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Style="{StaticResource ColumnHeaderGripperStyle}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter Value="{DynamicResource MouseOver.ForegroundBrush}" Property="TextElement.Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="Menu.Static.Background" Color="{DynamicResource BackgroundColor}" />
  <Style x:Key="{x:Type Menu}" TargetType="{x:Type Menu}">
    <Setter Property="Background" Value="{StaticResource Menu.Static.Background}" />
    <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}" />
    <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}" />
    <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}" />
    <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}" />
    <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Menu}">
          <Border BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}" SnapsToDevicePixels="True">
            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ComboBoxStyle2" TargetType="{x:Type ComboBox}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisual}" />
    <Setter Property="Background" Value="{DynamicResource ComboBox.Static.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ComboBox.Static.Border}" />
    <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="Padding" Value="6,3,5,3" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
    <Setter Property="ScrollViewer.PanningMode" Value="Both" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}" />
    <Style.Triggers>
      <Trigger Property="ComboBox.IsEditable" Value="True">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}" />
      </Trigger>
      <DataTrigger Value="false" Binding="{Binding HasItems, RelativeSource={RelativeSource Self}}">
        <Setter Property="IsEnabled" Value="False" />
      </DataTrigger>
      <DataTrigger Value="True" Binding="{Binding HasItems, RelativeSource={RelativeSource Self}}">
        <Setter Property="IsEnabled" Value="True" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Fill" Color="{DynamicResource MouseOver.ForegroundColor}" />
  <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Stroke" Color="{DynamicResource MouseOver.ForegroundColor}" />
  <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Stroke" Color="{DynamicResource MouseOver.ForegroundColor}" />
  <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Fill" Color="{DynamicResource MouseOver.ForegroundColor}" />
  <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Stroke" Color="{DynamicResource MouseOver.ForegroundColor}" />
  <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Fill" Color="{DynamicResource MouseOver.ForegroundColor}" />
  <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z" />
  <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Fill" Color="{DynamicResource ForegroundColor}" />
  <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Stroke" Color="{DynamicResource ForegroundColor}" />
  <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Width" Value="16" />
    <Setter Property="Height" Value="16" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Background="#00FFFFFF" Height="16" Padding="5,5,5,5" Width="16">
            <Path Name="ExpandPath" Data="{StaticResource TreeArrow}" Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}" Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}">
              <UIElement.RenderTransform>
                <RotateTransform Angle="135" CenterY="3" CenterX="3" />
              </UIElement.RenderTransform>
            </Path>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Setter TargetName="ExpandPath" Property="RenderTransform">
                <Setter.Value>
                  <RotateTransform Angle="180" CenterY="3" CenterX="3" />
                </Setter.Value>
              </Setter>
              <Setter TargetName="ExpandPath" Property="Shape.Fill" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Fill}" />
              <Setter TargetName="ExpandPath" Property="Shape.Stroke" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="ExpandPath" Property="Shape.Stroke" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}" />
              <Setter TargetName="ExpandPath" Property="Shape.Fill" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="True" />
                <Condition Property="ToggleButton.IsChecked" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="ExpandPath" Property="Shape.Stroke" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}" />
              <Setter TargetName="ExpandPath" Property="Shape.Fill" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MenuItemStyle" TargetType="{x:Type MenuItem}">
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <Border Name="templateRoot" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="0" Background="{DynamicResource BackgroundBrush}" SnapsToDevicePixels="True">
            <Grid Margin="0">
              <ContentPresenter ContentTemplate="{TemplateBinding HeaderedItemsControl.HeaderTemplate}" Content="{TemplateBinding HeaderedItemsControl.Header}" ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}" ContentSource="Header" HorizontalAlignment="Left" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="Center" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="MenuItem.IsHighlighted" Value="True">
              <Setter TargetName="templateRoot" Value="{DynamicResource ForegroundBrush}" Property="Border.Background" />
              <Setter TargetName="templateRoot" Value="{DynamicResource BackgroundBrush}" Property="TextElement.Foreground" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="templateRoot" Value="{DynamicResource Disabled.ForegroundBrush}" Property="TextElement.Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ContextMenuStyle1" TargetType="{x:Type ContextMenu}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
    <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{DynamicResource MenuPopupBorderBrush}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="2" />
    <Setter Property="Grid.IsSharedSizeScope" Value="True" />
    <Setter Property="ContextMenu.HasDropShadow" Value="{DynamicResource {x:Static SystemParameters.DropShadowKey}}" />
    <Setter Property="ScrollViewer.PanningMode" Value="Both" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
    <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
    <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContextMenu}">
          <Border Uid="Border_93">
            <FrameworkElement.Style>
              <Style TargetType="{x:Type Border}">
                <Setter Property="FrameworkElement.Tag" Value="{DynamicResource {x:Static SystemParameters.DropShadowKey}}" />
                <Style.Triggers>
                  <DataTrigger Value="True" Binding="{Binding Tag, RelativeSource={RelativeSource Self}}">
                    <Setter Property="Background" Value="#00FFFFFF" />
                    <Setter Property="Border.Padding" Value="0,0,5,5" />
                    <Setter Property="UIElement.Effect">
                      <Setter.Value>
                        <DropShadowEffect BlurRadius="4" Opacity="0.8" ShadowDepth="1" />
                      </Setter.Value>
                    </Setter>
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </FrameworkElement.Style>
            <Border BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" Uid="Border_50">
              <ScrollViewer CanContentScroll="True" Uid="ScrollViewer_9" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Cycle" Margin="{TemplateBinding Control.Padding}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Uid="ItemsPresenter_5" />
              </ScrollViewer>
            </Border>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="KeyValueTreeItemStyle" TargetType="{x:Type UI:KeyValueTreeItem}">
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="Padding" Value="1,0,0,0" />
    <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type UI:KeyValueTreeItem}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition MinWidth="19" Width="Auto" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition />
            </Grid.RowDefinitions>
            <ToggleButton Name="Expander" ClickMode="Press" Style="{StaticResource ExpandCollapseToggleStyle}" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" />
            <Border Name="Bd" Grid.ColumnSpan="2" HorizontalAlignment="Stretch" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" Grid.Column="1" Padding="{TemplateBinding Control.Padding}" SnapsToDevicePixels="True">
              <DockPanel>
                <FrameworkElement.ContextMenu>
                  <ContextMenu Style="{StaticResource ContextMenuStyle1}">
                    <MenuItem Header="Copy to clipboard" Style="{StaticResource MenuItemStyle}" Command="{Binding CopyToClipboardCommand, RelativeSource={RelativeSource TemplatedParent}}" />
                  </ContextMenu>
                </FrameworkElement.ContextMenu>
                <TextBlock FontSize="14" VerticalAlignment="Center" FontWeight="Bold" Text="{Binding KeyValue.Name, RelativeSource={RelativeSource TemplatedParent}}" />
                <TextBlock Name="TB_1" FontSize="14" Visibility="Collapsed" VerticalAlignment="Center" Text=": " />
                <TextBlock Name="TB_2" FontSize="14" DockPanel.Dock="Left" VerticalAlignment="Bottom" HorizontalAlignment="Stretch" MinWidth="100" Visibility="Collapsed" Text="{Binding KeyValue.Value, FallbackValue=null, RelativeSource={RelativeSource TemplatedParent}}" />
              </DockPanel>
            </Border>
            <ItemsPresenter Name="ItemsHost" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="TreeViewItem.IsExpanded" Value="False">
              <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <DataTrigger Binding="{Binding KeyValue.Value, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}" />
            <Trigger Property="ItemsControl.HasItems" Value="False">
              <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
              <Setter TargetName="TB_1" Property="Visibility" Value="Visible" />
              <Setter TargetName="TB_2" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="ItemsControl.HasItems" Value="False">
              <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="TreeViewItem.IsSelected" Value="True">
              <Setter TargetName="Bd" Value="{DynamicResource ForegroundBrush}" Property="Border.Background" />
              <Setter Value="{DynamicResource BackgroundBrushDark}" Property="Foreground" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="TreeViewItem.IsSelected" Value="True" />
                <Condition Property="TreeViewItem.IsSelectionActive" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Value="{DynamicResource ForegroundBrush}" Property="Border.Background" />
              <Setter Value="{DynamicResource BackgroundBrushDark}" Property="Foreground" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Value="{DynamicResource Disabled.ForegroundBrush}" Property="Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">
        <Setter Property="ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <VirtualizingStackPanel HorizontalAlignment="Stretch" />
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
</ResourceDictionary>